//#define MYDEBUG						//#define MYDEBUG
//#define MYDEBUG1						//#define MYDEBUG1
//#define MAINTEST						//#define MAINTEST
//#define TEST1							//#define TEST1
//===========================================================	//===========================================================
// Athena++ astrophysical MHD code				// Athena++ astrophysical MHD code
// Copyright(C) 2014 James M. Stone <jmstone@princeton.edu> a	// Copyright(C) 2014 James M. Stone <jmstone@princeton.edu> a
// Licensed under the 3-clause BSD License, see LICENSE file 	// Licensed under the 3-clause BSD License, see LICENSE file 
//===========================================================	//===========================================================
//! \file helmholtz.cpp						//! \file helmholtz.cpp
//  \brief implements the Helmholtz EOS in general EOS framew	//  \brief implements the Helmholtz EOS in general EOS framew
//  See http://cococubed.asu.edu/code_pages/eos.shtml and ref	//  See http://cococubed.asu.edu/code_pages/eos.shtml and ref
//===========================================================	//===========================================================

// C headers							// C headers

// C++ headers							// C++ headers
#include <iostream> // ifstream					#include <iostream> // ifstream
#include <sstream>  // stringstream				#include <sstream>  // stringstream

// Athena++ headers						// Athena++ headers
#include "../../athena.hpp"					#include "../../athena.hpp"
#include "../../athena_arrays.hpp"				#include "../../athena_arrays.hpp"
#include "../../parameter_input.hpp"				#include "../../parameter_input.hpp"
#include "../../utils/interp_table.hpp"				#include "../../utils/interp_table.hpp"
#include "../eos.hpp"						#include "../eos.hpp"

namespace {							namespace {
  const Real third2 = 1.0 / 3.0;				  const Real third2 = 1.0 / 3.0;
  const Real c = 2.99792458e10;					  const Real c = 2.99792458e10;
  const Real k = 1.380649e-16;					  const Real k = 1.380649e-16;
  const Real mn = 1.6726e-24;					  const Real mn = 1.6726e-24;
  const Real hbar = 6.62607015e-27/(2.0*PI);			  const Real hbar = 6.62607015e-27/(2.0*PI);
  const Real c3 = std::pow(k/(hbar*c),3);			  const Real c3 = std::pow(k/(hbar*c),3);
  const Real con3 = (11.0*PI*PI/180.0)*c3*k;			  const Real con3 = (11.0*PI*PI/180.0)*c3*k;
  const Real Tmin=1e3;						  const Real Tmin=1e3;
  const Real Tmax=1e15;						  const Real Tmax=1e15;
  const Real kmn=k/mn;						  const Real kmn=k/mn;
  const Real thel= 30.0/11.0;					  const Real thel= 30.0/11.0;
  const Real fiel= 15.0/11.0;					  const Real fiel= 15.0/11.0;
  const Real eta_den_const = std::pow(6.0,2.0*third2);		  const Real eta_den_const = std::pow(6.0,2.0*third2);
}								}
Real PorE(Real rho, Real T, Real Ye, int index) {		Real PorE(Real rho, Real T, Real Ye, int index) {
  Real vol = mn/rho;						  Real vol = mn/rho;
  Real T4 = T*T*T*T;						  Real T4 = T*T*T*T;
  Real a = c3*std::pow(T,3.0)*vol*(PI/3.0);			  Real a = c3*std::pow(T,3.0)*vol*(PI/3.0);
  Real a2 = SQR(a);						  Real a2 = SQR(a);
  Real a4 = SQR(a2);						  Real a4 = SQR(a2);
  Real a6 = a2 * a4;						  Real a6 = a2 * a4;
  Real y2 = SQR(Ye);						  Real y2 = SQR(Ye);
  Real b = std::sqrt(4.0*a6+27.0*a4*y2);			  Real b = std::sqrt(4.0*a6+27.0*a4*y2);
  Real term = std::pow(9.0*a2*Ye+std::pow(3.0,0.5)*b, third2)	  Real term = std::pow(9.0*a2*Ye+std::pow(3.0,0.5)*b, third2)
  Real eta = (std::pow(2.0,third2)/eta_den_const)*term/a - (2	  Real eta = (std::pow(2.0,third2)/eta_den_const)*term/a - (2

  Real eta2 = SQR(eta);						  Real eta2 = SQR(eta);

  Real eta4 = SQR(eta2);					  Real eta4 = SQR(eta2);

  Real con= con3*(1.0+thel*eta2 + fiel*eta4);			  Real con= con3*(1.0+thel*eta2 + fiel*eta4);
  Real p0 = rho*kmn*T;						  Real p0 = rho*kmn*T;
  if (index == 2) {						  if (index == 2) {
    return con*T4 + p0;						    return con*T4 + p0;
  } else if (index == 0) {					  } else if (index == 0) {
    return 3.0*con*T4 + 1.5*p0;					    return 3.0*con*T4 + 1.5*p0;
  }								  }
  std::cout<<"Incorrect index in PorE \n";			  std::cout<<"Incorrect index in PorE \n";
  return 0;							  return 0;
}								}



namespace HelmholtzConstants {					namespace HelmholtzConstants {
  const int nOut = 9;						  const int nOut = 9;
  const Real forth=4.0/3.0, third=1.0/3.0;			  const Real forth=4.0/3.0, third=1.0/3.0;
  //const Real avo=6.0221417930e23, kerg=1.380650424e-16, cli	  //const Real avo=6.0221417930e23, kerg=1.380650424e-16, cli
  //                  ssol=5.6704e-5;//, amu=1.66053878283e-2	  //                  ssol=5.6704e-5;//, amu=1.66053878283e-2
  const Real ssol=5.6704e-5;					  const Real ssol=5.6704e-5;
  const Real qe=4.8032042712e-10, avo=6.0221417930e23, clight	  const Real qe=4.8032042712e-10, avo=6.0221417930e23, clight
                    kerg=1.380650424e-16;			                    kerg=1.380650424e-16;
  const Real asol=4.0*ssol/clight, light2=clight*clight;	  const Real asol=4.0*ssol/clight, light2=clight*clight;
  const Real asoli3=asol/3.0;					  const Real asoli3=asol/3.0;
  //const Real kergavo=kerg*avo, sioncon = (2.0 * PI * amu * 	  //const Real kergavo=kerg*avo, sioncon = (2.0 * PI * amu * 

  // constants for the uniform background coulomb correction	  // constants for the uniform background coulomb correction
  const Real a1=-0.898004, b1=0.96786, c1=0.220703, d1=-0.860	  const Real a1=-0.898004, b1=0.96786, c1=0.220703, d1=-0.860
                    a2=0.29561, b2=1.9885, c2=0.288675;		                    a2=0.29561, b2=1.9885, c2=0.288675;
  //const Real qe=4.8032042712e-10;				  //const Real qe=4.8032042712e-10;
  const Real esqu=qe*qe;					  const Real esqu=qe*qe;
} // namespace HelmholtzConstants				} // namespace HelmholtzConstants

class HelmTable {						class HelmTable {
 public:							 public:
  int jmax, imax;						  int jmax, imax;
  Real tlo, thi, tstp, tstpi, dlo, dhi, dstp, dstpi;		  Real tlo, thi, tstp, tstpi, dlo, dhi, dstp, dstpi;
  HelmTable(ParameterInput *pin, EosTable *ptable) {		  HelmTable(ParameterInput *pin, EosTable *ptable) {
    jmax = ptable->nEgas;					    jmax = ptable->nEgas;
    tlo   = ptable->logEgasMin;					    tlo   = ptable->logEgasMin;
    thi   = ptable->logEgasMax;					    thi   = ptable->logEgasMax;
    tstp  = (thi - tlo)/static_cast<Real>(jmax-1);		    tstp  = (thi - tlo)/static_cast<Real>(jmax-1);
    tstpi = 1.0/tstp;						    tstpi = 1.0/tstp;

    imax = ptable->nRho;					    imax = ptable->nRho;
    dlo   = ptable->logRhoMin;					    dlo   = ptable->logRhoMin;
    dhi   = ptable->logRhoMax;					    dhi   = ptable->logRhoMax;
    dstp  = (dhi - dlo)/static_cast<Real>(imax-1);		    dstp  = (dhi - dlo)/static_cast<Real>(imax-1);
    dstpi = 1.0/dstp;						    dstpi = 1.0/dstp;
#ifdef MYDEBUG							#ifdef MYDEBUG
    std::cout << "Helm T: " << jmax << ", " << tlo << ", " <<	    std::cout << "Helm T: " << jmax << ", " << tlo << ", " <<
    std::cout << "Helm d: " << imax << ", " << dlo << ", " <<	    std::cout << "Helm d: " << imax << ", " << dlo << ", " <<
    std::cout << ptable->nVar << '\n';				    std::cout << ptable->nVar << '\n';
#endif								#endif

    // construct the temperature and density deltas and their	    // construct the temperature and density deltas and their
    t.NewAthenaArray(jmax);					    t.NewAthenaArray(jmax);
    dt_sav.NewAthenaArray(jmax);				    dt_sav.NewAthenaArray(jmax);
    dt2_sav.NewAthenaArray(jmax);				    dt2_sav.NewAthenaArray(jmax);
    dti_sav.NewAthenaArray(jmax);				    dti_sav.NewAthenaArray(jmax);
    dt2i_sav.NewAthenaArray(jmax);				    dt2i_sav.NewAthenaArray(jmax);
    for (int j=0; j<jmax; ++j) {				    for (int j=0; j<jmax; ++j) {
      Real tsav = tlo + j*tstp;					      Real tsav = tlo + j*tstp;
      t(j) = std::pow(10.0, tsav);				      t(j) = std::pow(10.0, tsav);
    }								    }
    for (int j=0; j<jmax-1; ++j) {				    for (int j=0; j<jmax-1; ++j) {
      Real dth         = t(j+1) - t(j);				      Real dth         = t(j+1) - t(j);
      Real dt2         = dth * dth;				      Real dt2         = dth * dth;
      Real dti         = 1.0/dth;				      Real dti         = 1.0/dth;
      Real dt2i        = 1.0/dt2;				      Real dt2i        = 1.0/dt2;
      //Real dt3i        = dt2i*dti;				      //Real dt3i        = dt2i*dti;
      dt_sav(j)   = dth;					      dt_sav(j)   = dth;
      dt2_sav(j)  = dt2;					      dt2_sav(j)  = dt2;
      dti_sav(j)  = dti;					      dti_sav(j)  = dti;
      dt2i_sav(j) = dt2i;					      dt2i_sav(j) = dt2i;
      //dt3i_sav(j) = dt3i;					      //dt3i_sav(j) = dt3i;
    }								    }
    d.NewAthenaArray(imax);					    d.NewAthenaArray(imax);
    dd_sav.NewAthenaArray(imax);				    dd_sav.NewAthenaArray(imax);
    dd2_sav.NewAthenaArray(imax);				    dd2_sav.NewAthenaArray(imax);
    ddi_sav.NewAthenaArray(imax);				    ddi_sav.NewAthenaArray(imax);
    dd2i_sav.NewAthenaArray(imax);				    dd2i_sav.NewAthenaArray(imax);
    for (int i=0; i<imax; ++i) {				    for (int i=0; i<imax; ++i) {
      Real dsav = dlo + i*dstp;					      Real dsav = dlo + i*dstp;
      d(i) = std::pow(10.0, dsav);				      d(i) = std::pow(10.0, dsav);
    }								    }
    for (int i=0; i<imax-1; ++i) {				    for (int i=0; i<imax-1; ++i) {
      Real dd          = d(i+1) - d(i);				      Real dd          = d(i+1) - d(i);
      Real dd2         = dd * dd;				      Real dd2         = dd * dd;
      Real ddi         = 1.0/dd;				      Real ddi         = 1.0/dd;
      Real dd2i        = 1.0/dd2;				      Real dd2i        = 1.0/dd2;
      //Real dd3i        = dd2i*ddi;				      //Real dd3i        = dd2i*ddi;
      dd_sav(i)   = dd;						      dd_sav(i)   = dd;
      dd2_sav(i)  = dd2;					      dd2_sav(i)  = dd2;
      ddi_sav(i)  = ddi;					      ddi_sav(i)  = ddi;
      dd2i_sav(i) = dd2i;					      dd2i_sav(i) = dd2i;
      //dd3i_sav(i) = dd3i;					      //dd3i_sav(i) = dd3i;
    }								    }
#ifdef MYDEBUG							#ifdef MYDEBUG
    printf("t(0), d(0): %.16e, %.16e\n", t(0), d(0));		    printf("t(0), d(0): %.16e, %.16e\n", t(0), d(0));
    printf("t(1), d(1): %.16e, %.16e\n", t(1), d(1));		    printf("t(1), d(1): %.16e, %.16e\n", t(1), d(1));
#endif								#endif
    // precission for inversion					    // precission for inversion
    prec = pin->GetOrAddReal("hydro", "helm_prec", 1e-8);	    prec = pin->GetOrAddReal("hydro", "helm_prec", 1e-8);
    nmax = pin->GetOrAddInteger("hydro", "helm_nmax", 5000);	    nmax = pin->GetOrAddInteger("hydro", "helm_nmax", 5000);
    Tfloor = pin->GetOrAddBoolean("hydro", "helm_Tfloor", fal	    Tfloor = pin->GetOrAddBoolean("hydro", "helm_Tfloor", fal

    fi.NewAthenaArray(36);					    fi.NewAthenaArray(36);
    // helmholtz free energy and its derivatives		    // helmholtz free energy and its derivatives
    f.InitWithShallowSlice(ptable->table.data, 3, 0, 1);	    f.InitWithShallowSlice(ptable->table.data, 3, 0, 1);
    fd.InitWithShallowSlice(ptable->table.data, 3, 1, 1);	    fd.InitWithShallowSlice(ptable->table.data, 3, 1, 1);
    ft.InitWithShallowSlice(ptable->table.data, 3, 2, 1);	    ft.InitWithShallowSlice(ptable->table.data, 3, 2, 1);
    fdd.InitWithShallowSlice(ptable->table.data, 3, 3, 1);	    fdd.InitWithShallowSlice(ptable->table.data, 3, 3, 1);
    ftt.InitWithShallowSlice(ptable->table.data, 3, 4, 1);	    ftt.InitWithShallowSlice(ptable->table.data, 3, 4, 1);
    fdt.InitWithShallowSlice(ptable->table.data, 3, 5, 1);	    fdt.InitWithShallowSlice(ptable->table.data, 3, 5, 1);
    fddt.InitWithShallowSlice(ptable->table.data, 3, 6, 1);	    fddt.InitWithShallowSlice(ptable->table.data, 3, 6, 1);
    fdtt.InitWithShallowSlice(ptable->table.data, 3, 7, 1);	    fdtt.InitWithShallowSlice(ptable->table.data, 3, 7, 1);
    fddtt.InitWithShallowSlice(ptable->table.data, 3, 8, 1);	    fddtt.InitWithShallowSlice(ptable->table.data, 3, 8, 1);
    // pressure derivative with density table			    // pressure derivative with density table
    dpdf.InitWithShallowSlice(ptable->table.data, 3, 9, 1);	    dpdf.InitWithShallowSlice(ptable->table.data, 3, 9, 1);
    dpdfd.InitWithShallowSlice(ptable->table.data, 3, 10, 1);	    dpdfd.InitWithShallowSlice(ptable->table.data, 3, 10, 1);
    dpdft.InitWithShallowSlice(ptable->table.data, 3, 11, 1);	    dpdft.InitWithShallowSlice(ptable->table.data, 3, 11, 1);
    dpdfdt.InitWithShallowSlice(ptable->table.data, 3, 12, 1)	    dpdfdt.InitWithShallowSlice(ptable->table.data, 3, 12, 1)
    // number density table					    // number density table
    xf.InitWithShallowSlice(ptable->table.data, 3, 13, 1);	    xf.InitWithShallowSlice(ptable->table.data, 3, 13, 1);
    xfd.InitWithShallowSlice(ptable->table.data, 3, 14, 1);	    xfd.InitWithShallowSlice(ptable->table.data, 3, 14, 1);
    xft.InitWithShallowSlice(ptable->table.data, 3, 15, 1);	    xft.InitWithShallowSlice(ptable->table.data, 3, 15, 1);
    xfdt.InitWithShallowSlice(ptable->table.data, 3, 16, 1);	    xfdt.InitWithShallowSlice(ptable->table.data, 3, 16, 1);

   // electron chemical potential table				   // electron chemical potential table
    ef.InitWithShallowSlice(ptable->table.data, 3, 17, 1);	    ef.InitWithShallowSlice(ptable->table.data, 3, 17, 1);
    efd.InitWithShallowSlice(ptable->table.data, 3, 18, 1);	    efd.InitWithShallowSlice(ptable->table.data, 3, 18, 1);
    eft.InitWithShallowSlice(ptable->table.data, 3, 19, 1);	    eft.InitWithShallowSlice(ptable->table.data, 3, 19, 1);
    efdt.InitWithShallowSlice(ptable->table.data, 3, 20, 1);	    efdt.InitWithShallowSlice(ptable->table.data, 3, 20, 1);

  }								  }

// OutData has length 9 (HelmholtzConstants::nOut)		// OutData has length 9 (HelmholtzConstants::nOut)
  void HelmLookupRhoT(Real den, Real temp, Real ye, Real abar	  void HelmLookupRhoT(Real den, Real temp, Real ye, Real abar
                      AthenaArray<Real> &OutData) {		                      AthenaArray<Real> &OutData) {
    using namespace HelmholtzConstants;  // NOLINT (build/nam	    using namespace HelmholtzConstants;  // NOLINT (build/nam
    Real din = ye * den;					    Real din = ye * den;
    Real ytot1 = 1.0/abar;					    Real ytot1 = 1.0/abar;
    Real zbar = ye * abar;					    Real zbar = ye * abar;
    //hash locate this temperature and density			    //hash locate this temperature and density
    int jat = static_cast<int>((std::log10(temp) - tlo)*tstpi	    int jat = static_cast<int>((std::log10(temp) - tlo)*tstpi
    jat = std::max(0,std::min(jat,jmax-1));			    jat = std::max(0,std::min(jat,jmax-1));
    int iat = static_cast<int>((std::log10(din) - dlo)*dstpi)	    int iat = static_cast<int>((std::log10(din) - dlo)*dstpi)
    iat = std::max(0,std::min(iat,imax-1));			    iat = std::max(0,std::min(iat,imax-1));
#ifdef MYDEBUG							#ifdef MYDEBUG
    std::cout << "i,j: " << iat << ", " << jat << '\n';		    std::cout << "i,j: " << iat << ", " << jat << '\n';
#endif								#endif

    // initialize						    // initialize
    Real deni    = 1.0/den;					    Real deni    = 1.0/den;
    Real tempi   = 1.0/temp;					    Real tempi   = 1.0/temp;
    Real kt      = kerg * temp;					    Real kt      = kerg * temp;
    Real ktinv   = 1.0/kt;					    Real ktinv   = 1.0/kt;

    ////////////////////////					    ////////////////////////
    // radiation section: //					    // radiation section: //
    ////////////////////////					    ////////////////////////

    //printf("a, t, t4: %.16e, %.16e, %.16e\n", asoli3, temp,	    //printf("a, t, t4: %.16e, %.16e, %.16e\n", asoli3, temp,
    Real prad    = asoli3 * temp * temp * temp * temp;		    Real prad    = asoli3 * temp * temp * temp * temp;
    Real dpraddd = 0.0;						    Real dpraddd = 0.0;
    Real dpraddt = 4.0 * prad*tempi;				    Real dpraddt = 4.0 * prad*tempi;
    //Real dpradda = 0.0;					    //Real dpradda = 0.0;
    //Real dpraddz = 0.0;					    //Real dpraddz = 0.0;

    Real erad    = 3.0 * prad*deni;				    Real erad    = 3.0 * prad*deni;
    //Real deraddd = -erad*deni;				    //Real deraddd = -erad*deni;
    Real deraddt = 3.0 * dpraddt*deni;				    Real deraddt = 3.0 * dpraddt*deni;
    //Real deradda = 0.0;					    //Real deradda = 0.0;
    //Real deraddz = 0.0;					    //Real deraddz = 0.0;

    //Real srad    = (prad*deni + erad)*tempi;			    //Real srad    = (prad*deni + erad)*tempi;
    //Real dsraddd = (dpraddd*deni - prad*deni*deni + deraddd	    //Real dsraddd = (dpraddd*deni - prad*deni*deni + deraddd
    //Real dsraddt = (dpraddt*deni + deraddt - srad)*tempi;	    //Real dsraddt = (dpraddt*deni + deraddt - srad)*tempi;
    //Real dsradda = 0.0;					    //Real dsradda = 0.0;
    //Real dsraddz = 0.0;					    //Real dsraddz = 0.0;

    //////////////////						    //////////////////
    // ion section: //						    // ion section: //
    //////////////////						    //////////////////

    Real xni     = avo * ytot1 * den;				    Real xni     = avo * ytot1 * den;
    Real dxnidd  = avo * ytot1;					    Real dxnidd  = avo * ytot1;
    Real dxnida  = -xni * ytot1;				    Real dxnida  = -xni * ytot1;

    Real pion    = xni * kt;					    Real pion    = xni * kt;
    Real dpiondd = dxnidd * kt;					    Real dpiondd = dxnidd * kt;
    Real dpiondt = xni * kerg;					    Real dpiondt = xni * kerg;
    Real dpionda = dxnida * kt;					    Real dpionda = dxnida * kt;
    Real dpiondz = 0.0;						    Real dpiondz = 0.0;

    Real eion    = 1.5 * pion*deni;				    Real eion    = 1.5 * pion*deni;
    //Real deiondd = (1.5 * dpiondd - eion)*deni;		    //Real deiondd = (1.5 * dpiondd - eion)*deni;
    Real deiondt = 1.5 * dpiondt*deni;				    Real deiondt = 1.5 * dpiondt*deni;
    //Real deionda = 1.5 * dpionda*deni;			    //Real deionda = 1.5 * dpionda*deni;
    //Real deiondz = 0.0;					    //Real deiondz = 0.0;

    // sackur-tetrode equation for the ion entropy of		    // sackur-tetrode equation for the ion entropy of
    // a single ideal gas characterized by abar			    // a single ideal gas characterized by abar
    Real s, x, y, z;						    Real s, x, y, z;

    //x       = abar*abar*std::sqrt(abar) * deni/avo;		    //x       = abar*abar*std::sqrt(abar) * deni/avo;
    //s       = sioncon * temp;					    //s       = sioncon * temp;
    //z       = x * s * std::sqrt(s);				    //z       = x * s * std::sqrt(s);
    //y       = std::log(z);					    //y       = std::log(z);
    //Real sion    = (pion*deni + eion)*tempi + kergavo * yto	    //Real sion    = (pion*deni + eion)*tempi + kergavo * yto
    //Real dsiondd = (dpiondd*deni - pion*deni*deni + deiondd	    //Real dsiondd = (dpiondd*deni - pion*deni*deni + deiondd
    //              - kergavo * deni * ytot1;			    //              - kergavo * deni * ytot1;
    //Real dsiondt = (dpiondt*deni + deiondt)*tempi - (pion*d	    //Real dsiondt = (dpiondt*deni + deiondt)*tempi - (pion*d
    //              + 1.5 * kergavo * tempi*ytot1;		    //              + 1.5 * kergavo * tempi*ytot1;
    //x = avo*kerg/abar;					    //x = avo*kerg/abar;
    //Real dsionda = (dpionda*deni + deionda)*tempi + kergavo	    //Real dsionda = (dpionda*deni + deionda)*tempi + kergavo
    //Real dsiondz = 0.0;					    //Real dsiondz = 0.0;

    ////////////////////////////////				    ////////////////////////////////
    // electron-positron section: //				    // electron-positron section: //
    ////////////////////////////////				    ////////////////////////////////

    // assume complete ionization				    // assume complete ionization
    // Real xnem = xni * zbar;					    // Real xnem = xni * zbar;

    // access the table locations only once			    // access the table locations only once
    fi(0)  = f(iat,jat);					    fi(0)  = f(iat,jat);
    fi(1)  = f(iat+1,jat);					    fi(1)  = f(iat+1,jat);
    fi(2)  = f(iat,jat+1);					    fi(2)  = f(iat,jat+1);
    fi(3)  = f(iat+1,jat+1);					    fi(3)  = f(iat+1,jat+1);
    fi(4)  = ft(iat,jat);					    fi(4)  = ft(iat,jat);
    fi(5)  = ft(iat+1,jat);					    fi(5)  = ft(iat+1,jat);
    fi(6)  = ft(iat,jat+1);					    fi(6)  = ft(iat,jat+1);
    fi(7)  = ft(iat+1,jat+1);					    fi(7)  = ft(iat+1,jat+1);
    fi(8)  = ftt(iat,jat);					    fi(8)  = ftt(iat,jat);
    fi(9)  = ftt(iat+1,jat);					    fi(9)  = ftt(iat+1,jat);
    fi(10) = ftt(iat,jat+1);					    fi(10) = ftt(iat,jat+1);
    fi(11) = ftt(iat+1,jat+1);					    fi(11) = ftt(iat+1,jat+1);
    fi(12) = fd(iat,jat);					    fi(12) = fd(iat,jat);
    fi(13) = fd(iat+1,jat);					    fi(13) = fd(iat+1,jat);
    fi(14) = fd(iat,jat+1);					    fi(14) = fd(iat,jat+1);
    fi(15) = fd(iat+1,jat+1);					    fi(15) = fd(iat+1,jat+1);
    fi(16) = fdd(iat,jat);					    fi(16) = fdd(iat,jat);
    fi(17) = fdd(iat+1,jat);					    fi(17) = fdd(iat+1,jat);
    fi(18) = fdd(iat,jat+1);					    fi(18) = fdd(iat,jat+1);
    fi(19) = fdd(iat+1,jat+1);					    fi(19) = fdd(iat+1,jat+1);
    fi(20) = fdt(iat,jat);					    fi(20) = fdt(iat,jat);
    fi(21) = fdt(iat+1,jat);					    fi(21) = fdt(iat+1,jat);
    fi(22) = fdt(iat,jat+1);					    fi(22) = fdt(iat,jat+1);
    fi(23) = fdt(iat+1,jat+1);					    fi(23) = fdt(iat+1,jat+1);
    fi(24) = fddt(iat,jat);					    fi(24) = fddt(iat,jat);
    fi(25) = fddt(iat+1,jat);					    fi(25) = fddt(iat+1,jat);
    fi(26) = fddt(iat,jat+1);					    fi(26) = fddt(iat,jat+1);
    fi(27) = fddt(iat+1,jat+1);					    fi(27) = fddt(iat+1,jat+1);
    fi(28) = fdtt(iat,jat);					    fi(28) = fdtt(iat,jat);
    fi(29) = fdtt(iat+1,jat);					    fi(29) = fdtt(iat+1,jat);
    fi(30) = fdtt(iat,jat+1);					    fi(30) = fdtt(iat,jat+1);
    fi(31) = fdtt(iat+1,jat+1);					    fi(31) = fdtt(iat+1,jat+1);
    fi(32) = fddtt(iat,jat);					    fi(32) = fddtt(iat,jat);
    fi(33) = fddtt(iat+1,jat);					    fi(33) = fddtt(iat+1,jat);
    fi(34) = fddtt(iat,jat+1);					    fi(34) = fddtt(iat,jat+1);
    fi(35) = fddtt(iat+1,jat+1);				    fi(35) = fddtt(iat+1,jat+1);

    // various differences					    // various differences
    Real xt  = std::max((temp - t(jat))*dti_sav(jat), 0.0);	    Real xt  = std::max((temp - t(jat))*dti_sav(jat), 0.0);
    Real xd  = std::max((din  - d(iat))*ddi_sav(iat), 0.0);	    Real xd  = std::max((din  - d(iat))*ddi_sav(iat), 0.0);
    Real mxt = 1.0 - xt;					    Real mxt = 1.0 - xt;
    Real mxd = 1.0 - xd;					    Real mxd = 1.0 - xd;
#ifdef MYDEBUG							#ifdef MYDEBUG
    printf("xd, xt: %.16e, %.16e\n", xd, xt);			    printf("xd, xt: %.16e, %.16e\n", xd, xt);
    printf("din, d(i): %.16e, %.16e, %.16e\n", din, d(iat), d	    printf("din, d(i): %.16e, %.16e, %.16e\n", din, d(iat), d
    printf("tin, t(j): %.16e, %.16e, %.16e\n", temp, t(jat), 	    printf("tin, t(j): %.16e, %.16e, %.16e\n", temp, t(jat), 
#endif								#endif

    // the six density and six temperature basis functions	    // the six density and six temperature basis functions
    Real si0t =   psi0(xt);					    Real si0t =   psi0(xt);
    Real si1t =   psi1(xt)*dt_sav(jat);				    Real si1t =   psi1(xt)*dt_sav(jat);
    Real si2t =   psi2(xt)*dt2_sav(jat);			    Real si2t =   psi2(xt)*dt2_sav(jat);

    Real si0mt =  psi0(mxt);					    Real si0mt =  psi0(mxt);
    Real si1mt = -psi1(mxt)*dt_sav(jat);			    Real si1mt = -psi1(mxt)*dt_sav(jat);
    Real si2mt =  psi2(mxt)*dt2_sav(jat);			    Real si2mt =  psi2(mxt)*dt2_sav(jat);

    Real si0d =   psi0(xd);					    Real si0d =   psi0(xd);
    Real si1d =   psi1(xd)*dd_sav(iat);				    Real si1d =   psi1(xd)*dd_sav(iat);
    Real si2d =   psi2(xd)*dd2_sav(iat);			    Real si2d =   psi2(xd)*dd2_sav(iat);

    Real si0md =  psi0(mxd);					    Real si0md =  psi0(mxd);
    Real si1md = -psi1(mxd)*dd_sav(iat);			    Real si1md = -psi1(mxd)*dd_sav(iat);
    Real si2md =  psi2(mxd)*dd2_sav(iat);			    Real si2md =  psi2(mxd)*dd2_sav(iat);

    // derivatives of the weight functions			    // derivatives of the weight functions
    Real dsi0t =   dpsi0(xt)*dti_sav(jat);			    Real dsi0t =   dpsi0(xt)*dti_sav(jat);
    Real dsi1t =   dpsi1(xt);					    Real dsi1t =   dpsi1(xt);
    Real dsi2t =   dpsi2(xt)*dt_sav(jat);			    Real dsi2t =   dpsi2(xt)*dt_sav(jat);

    Real dsi0mt = -dpsi0(mxt)*dti_sav(jat);			    Real dsi0mt = -dpsi0(mxt)*dti_sav(jat);
    Real dsi1mt =  dpsi1(mxt);					    Real dsi1mt =  dpsi1(mxt);
    Real dsi2mt = -dpsi2(mxt)*dt_sav(jat);			    Real dsi2mt = -dpsi2(mxt)*dt_sav(jat);

    Real dsi0d =   dpsi0(xd)*ddi_sav(iat);			    Real dsi0d =   dpsi0(xd)*ddi_sav(iat);
    Real dsi1d =   dpsi1(xd);					    Real dsi1d =   dpsi1(xd);
    Real dsi2d =   dpsi2(xd)*dd_sav(iat);			    Real dsi2d =   dpsi2(xd)*dd_sav(iat);

    Real dsi0md = -dpsi0(mxd)*ddi_sav(iat);			    Real dsi0md = -dpsi0(mxd)*ddi_sav(iat);
    Real dsi1md =  dpsi1(mxd);					    Real dsi1md =  dpsi1(mxd);
    Real dsi2md = -dpsi2(mxd)*dd_sav(iat);			    Real dsi2md = -dpsi2(mxd)*dd_sav(iat);

    // second derivatives of the weight functions		    // second derivatives of the weight functions
    Real ddsi0t =   ddpsi0(xt)*dt2i_sav(jat);			    Real ddsi0t =   ddpsi0(xt)*dt2i_sav(jat);
    Real ddsi1t =   ddpsi1(xt)*dti_sav(jat);			    Real ddsi1t =   ddpsi1(xt)*dti_sav(jat);
    Real ddsi2t =   ddpsi2(xt);					    Real ddsi2t =   ddpsi2(xt);

    Real ddsi0mt =  ddpsi0(mxt)*dt2i_sav(jat);			    Real ddsi0mt =  ddpsi0(mxt)*dt2i_sav(jat);
    Real ddsi1mt = -ddpsi1(mxt)*dti_sav(jat);			    Real ddsi1mt = -ddpsi1(mxt)*dti_sav(jat);
    Real ddsi2mt =  ddpsi2(mxt);				    Real ddsi2mt =  ddpsi2(mxt);

    //Real ddsi0d =   ddpsi0(xd)*dd2i_sav(iat);			    //Real ddsi0d =   ddpsi0(xd)*dd2i_sav(iat);
    //Real ddsi1d =   ddpsi1(xd)*ddi_sav(iat);			    //Real ddsi1d =   ddpsi1(xd)*ddi_sav(iat);
    //Real ddsi2d =   ddpsi2(xd);				    //Real ddsi2d =   ddpsi2(xd);

    //Real ddsi0md =  ddpsi0(mxd)*dd2i_sav(iat);		    //Real ddsi0md =  ddpsi0(mxd)*dd2i_sav(iat);
    //Real ddsi1md = -ddpsi1(mxd)*ddi_sav(iat);			    //Real ddsi1md = -ddpsi1(mxd)*ddi_sav(iat);
    //Real ddsi2md =  ddpsi2(mxd);				    //Real ddsi2md =  ddpsi2(mxd);

    // the free energy						    // the free energy
    Real free  = h5(fi, si0t, si1t, si2t, si0mt, si1mt, si2mt	    Real free  = h5(fi, si0t, si1t, si2t, si0mt, si1mt, si2mt
                    si1md, si2md);				                    si1md, si2md);
#ifdef MYDEBUG							#ifdef MYDEBUG
    printf("free: %.16e\n", fi(0));				    printf("free: %.16e\n", fi(0));
#endif								#endif

    // derivative with respect to density			    // derivative with respect to density
    Real df_d  = h5(fi, si0t, si1t, si2t, si0mt, si1mt, si2mt	    Real df_d  = h5(fi, si0t, si1t, si2t, si0mt, si1mt, si2mt
                    dsi0md, dsi1md, dsi2md);			                    dsi0md, dsi1md, dsi2md);

    // derivative with respect to temperature			    // derivative with respect to temperature
    Real df_t = h5(fi, dsi0t, dsi1t, dsi2t, dsi0mt, dsi1mt, d	    Real df_t = h5(fi, dsi0t, dsi1t, dsi2t, dsi0mt, dsi1mt, d
                   si0md, si1md, si2md);			                   si0md, si1md, si2md);
#ifdef MYDEBUG							#ifdef MYDEBUG
    printf("df_t: %.16e, %.16e\n", df_t, fi(4));		    printf("df_t: %.16e, %.16e\n", df_t, fi(4));
#endif								#endif


    // derivative with respect to density**2			    // derivative with respect to density**2
    //Real df_dd = h5(fi, si0t, si1t, si2t, si0mt, si1mt, si2	    //Real df_dd = h5(fi, si0t, si1t, si2t, si0mt, si1mt, si2
    //                ddsi0md, ddsi1md, ddsi2md);		    //                ddsi0md, ddsi1md, ddsi2md);

    // derivative with respect to temperature**2		    // derivative with respect to temperature**2
    Real df_tt = h5(fi, ddsi0t, ddsi1t, ddsi2t, ddsi0mt, ddsi	    Real df_tt = h5(fi, ddsi0t, ddsi1t, ddsi2t, ddsi0mt, ddsi
                    si2d, si0md, si1md, si2md);			                    si2d, si0md, si1md, si2md);

    // derivative with respect to temperature and density	    // derivative with respect to temperature and density
    Real df_dt = h5(fi, dsi0t, dsi1t, dsi2t, dsi0mt, dsi1mt, 	    Real df_dt = h5(fi, dsi0t, dsi1t, dsi2t, dsi0mt, dsi1mt, 
                    dsi0md, dsi1md, dsi2md);			                    dsi0md, dsi1md, dsi2md);

    // now get the pressure derivative with density, chemical	    // now get the pressure derivative with density, chemical
    // electron positron number densities			    // electron positron number densities
    // get the interpolation weight functions			    // get the interpolation weight functions
    si0t   =  xpsi0(xt);					    si0t   =  xpsi0(xt);
    si1t   =  xpsi1(xt)*dt_sav(jat);				    si1t   =  xpsi1(xt)*dt_sav(jat);

    si0mt  =  xpsi0(mxt);					    si0mt  =  xpsi0(mxt);
    si1mt  =  -xpsi1(mxt)*dt_sav(jat);				    si1mt  =  -xpsi1(mxt)*dt_sav(jat);

    si0d   =  xpsi0(xd);					    si0d   =  xpsi0(xd);
    si1d   =  xpsi1(xd)*dd_sav(iat);				    si1d   =  xpsi1(xd)*dd_sav(iat);

    si0md  =  xpsi0(mxd);					    si0md  =  xpsi0(mxd);
    si1md  =  -xpsi1(mxd)*dd_sav(iat);				    si1md  =  -xpsi1(mxd)*dd_sav(iat);

    // derivatives of weight functions				    // derivatives of weight functions
    dsi0t  = xdpsi0(xt)*dti_sav(jat);				    dsi0t  = xdpsi0(xt)*dti_sav(jat);
    dsi1t  = xdpsi1(xt);					    dsi1t  = xdpsi1(xt);

    dsi0mt = -xdpsi0(mxt)*dti_sav(jat);				    dsi0mt = -xdpsi0(mxt)*dti_sav(jat);
    dsi1mt = xdpsi1(mxt);					    dsi1mt = xdpsi1(mxt);

    dsi0d  = xdpsi0(xd)*ddi_sav(iat);				    dsi0d  = xdpsi0(xd)*ddi_sav(iat);
    dsi1d  = xdpsi1(xd);					    dsi1d  = xdpsi1(xd);

    dsi0md = -xdpsi0(mxd)*ddi_sav(iat);				    dsi0md = -xdpsi0(mxd)*ddi_sav(iat);
    dsi1md = xdpsi1(mxd);					    dsi1md = xdpsi1(mxd);

    // look in the pressure derivative only once		    // look in the pressure derivative only once
    fi(0)  = dpdf(iat,jat);					    fi(0)  = dpdf(iat,jat);
    fi(1)  = dpdf(iat+1,jat);					    fi(1)  = dpdf(iat+1,jat);
    fi(2)  = dpdf(iat,jat+1);					    fi(2)  = dpdf(iat,jat+1);
    fi(3)  = dpdf(iat+1,jat+1);					    fi(3)  = dpdf(iat+1,jat+1);
    fi(4)  = dpdft(iat,jat);					    fi(4)  = dpdft(iat,jat);
    fi(5)  = dpdft(iat+1,jat);					    fi(5)  = dpdft(iat+1,jat);
    fi(6)  = dpdft(iat,jat+1);					    fi(6)  = dpdft(iat,jat+1);
    fi(7)  = dpdft(iat+1,jat+1);				    fi(7)  = dpdft(iat+1,jat+1);
    fi(8)  = dpdfd(iat,jat);					    fi(8)  = dpdfd(iat,jat);
    fi(9)  = dpdfd(iat+1,jat);					    fi(9)  = dpdfd(iat+1,jat);
    fi(10) = dpdfd(iat,jat+1);					    fi(10) = dpdfd(iat,jat+1);
    fi(11) = dpdfd(iat+1,jat+1);				    fi(11) = dpdfd(iat+1,jat+1);
    fi(12) = dpdfdt(iat,jat);					    fi(12) = dpdfdt(iat,jat);
    fi(13) = dpdfdt(iat+1,jat);					    fi(13) = dpdfdt(iat+1,jat);
    fi(14) = dpdfdt(iat,jat+1);					    fi(14) = dpdfdt(iat,jat+1);
    fi(15) = dpdfdt(iat+1,jat+1);				    fi(15) = dpdfdt(iat+1,jat+1);

    // pressure derivative with density				    // pressure derivative with density
    Real dpepdd = h3(fi, si0t, si1t, si0mt, si1mt, si0d, si1d	    Real dpepdd = h3(fi, si0t, si1t, si0mt, si1mt, si0d, si1d
    dpepdd = std::max(ye * dpepdd, 1.0e-30);			    dpepdd = std::max(ye * dpepdd, 1.0e-30);


    // look in the electron chemical potential table only onc	    // look in the electron chemical potential table only onc
    //std::cout<<"Seg fault after this \n";			    //std::cout<<"Seg fault after this \n";
    fi(0)  = ef(iat,jat);					    fi(0)  = ef(iat,jat);
    fi(1)  = ef(iat+1,jat);					    fi(1)  = ef(iat+1,jat);
    fi(2)  = ef(iat,jat+1);					    fi(2)  = ef(iat,jat+1);
    fi(3)  = ef(iat+1,jat+1);					    fi(3)  = ef(iat+1,jat+1);
    fi(4)  = eft(iat,jat);					    fi(4)  = eft(iat,jat);
    fi(5)  = eft(iat+1,jat);					    fi(5)  = eft(iat+1,jat);
    fi(6)  = eft(iat,jat+1);					    fi(6)  = eft(iat,jat+1);
    fi(7)  = eft(iat+1,jat+1);					    fi(7)  = eft(iat+1,jat+1);
    fi(8)  = efd(iat,jat);					    fi(8)  = efd(iat,jat);
    fi(9) = efd(iat+1,jat);					    fi(9) = efd(iat+1,jat);
    fi(10) = efd(iat,jat+1);					    fi(10) = efd(iat,jat+1);
    fi(11) = efd(iat+1,jat+1);					    fi(11) = efd(iat+1,jat+1);
    fi(12) = efdt(iat,jat);					    fi(12) = efdt(iat,jat);
    fi(13) = efdt(iat+1,jat);					    fi(13) = efdt(iat+1,jat);
    fi(14) = efdt(iat,jat+1);					    fi(14) = efdt(iat,jat+1);
    fi(15) = efdt(iat+1,jat+1);					    fi(15) = efdt(iat+1,jat+1);


   //electron chemical potential etaele				   //electron chemical potential etaele
    Real etaele  = h3(fi, si0t, si1t, si0mt, si1mt, si0d, si1	    Real etaele  = h3(fi, si0t, si1t, si0mt, si1mt, si0d, si1

    //								    //
    // look in the number density table only once		    // look in the number density table only once
    // skipping ^^^						    // skipping ^^^

    // the desired electron-positron thermodynamic quantities	    // the desired electron-positron thermodynamic quantities

    // dpepdd at high temperatures and low densities is below	    // dpepdd at high temperatures and low densities is below
    // floating point limit of the subtraction of two large t	    // floating point limit of the subtraction of two large t
    // since dpresdd doesn't enter the maxwell relations at a	    // since dpresdd doesn't enter the maxwell relations at a
    // bicubic interpolation done above instead of the formal	    // bicubic interpolation done above instead of the formal
    x = din * din;						    x = din * din;
    Real pele   = x * df_d;					    Real pele   = x * df_d;
    Real dpepdt = x * df_dt;					    Real dpepdt = x * df_dt;
    //        dpepdd  = ye * (x * df_dd + 2.0 * din * df_d)	    //        dpepdd  = ye * (x * df_dd + 2.0 * din * df_d)
    //s       = dpepdd/ye - 2.0 * din * df_d;			    //s       = dpepdd/ye - 2.0 * din * df_d;
    //Real dpepda  = -ytot1 * (2.0 * pele + s * din);		    //Real dpepda  = -ytot1 * (2.0 * pele + s * din);
    //Real dpepdz  = den*ytot1*(2.0 * din * df_d  +  s);	    //Real dpepdz  = den*ytot1*(2.0 * din * df_d  +  s);


    //x       = ye * ye;					    //x       = ye * ye;
    Real sele    = -df_t * ye;					    Real sele    = -df_t * ye;
    Real dsepdt  = -df_tt * ye;					    Real dsepdt  = -df_tt * ye;
    //Real dsepdd  = -df_dt * x;				    //Real dsepdd  = -df_dt * x;
    //Real dsepda  = ytot1 * (ye * df_dt * din - sele);		    //Real dsepda  = ytot1 * (ye * df_dt * din - sele);
    //Real dsepdz  = -ytot1 * (ye * df_dt * den  + df_t);	    //Real dsepdz  = -ytot1 * (ye * df_dt * den  + df_t);


    Real eele    = ye*free + temp * sele;			    Real eele    = ye*free + temp * sele;
    Real deepdt  = temp * dsepdt;				    Real deepdt  = temp * dsepdt;
    //Real deepdd  = x * df_d + temp * dsepdd;			    //Real deepdd  = x * df_d + temp * dsepdd;
    //Real deepda  = -ye * ytot1 * (free +  df_d * din) + tem	    //Real deepda  = -ye * ytot1 * (free +  df_d * din) + tem
    //Real deepdz  = ytot1* (free + ye * df_d * den) + temp *	    //Real deepdz  = ytot1* (free + ye * df_d * den) + temp *

    // coulomb section:						    // coulomb section:

    // uniform background corrections only			    // uniform background corrections only
    // from yakovlev & shalybkov 1989				    // from yakovlev & shalybkov 1989
    // lami is the average ion seperation			    // lami is the average ion seperation
    // plasg is the plasma coupling parameter			    // plasg is the plasma coupling parameter

    z        = forth * PI;					    z        = forth * PI;
    s        = z * xni;						    s        = z * xni;
    Real dsdd     = z * dxnidd;					    Real dsdd     = z * dxnidd;
    Real dsda     = z * dxnida;					    Real dsda     = z * dxnida;

    Real lami     = std::pow(s, -third);			    Real lami     = std::pow(s, -third);
    Real inv_lami = 1.0/lami;					    Real inv_lami = 1.0/lami;
    z = -third * lami;						    z = -third * lami;
    Real lamidd   = z * dsdd/s;					    Real lamidd   = z * dsdd/s;
    Real lamida   = z * dsda/s;					    Real lamida   = z * dsda/s;

    Real plasg    = zbar*zbar*esqu*ktinv*inv_lami;		    Real plasg    = zbar*zbar*esqu*ktinv*inv_lami;
#ifdef MYDEBUG							#ifdef MYDEBUG
    printf("plasg xni sele: %.16e, %.16e, %.16e\n", plasg, xn	    printf("plasg xni sele: %.16e, %.16e, %.16e\n", plasg, xn
#endif								#endif
    z = -plasg * inv_lami;					    z = -plasg * inv_lami;
    Real plasgdd  = z * lamidd;					    Real plasgdd  = z * lamidd;
    Real plasgda  = z * lamida;					    Real plasgda  = z * lamida;
    Real plasgdt  = -plasg*ktinv * kerg;			    Real plasgdt  = -plasg*ktinv * kerg;
    Real plasgdz  = 2.0 * plasg/zbar;				    Real plasgdz  = 2.0 * plasg/zbar;
    //if(ye<1e-16){std::cout<<"Plasgdz in helmlookup   "<<ye<	    //if(ye<1e-16){std::cout<<"Plasgdz in helmlookup   "<<ye<
    Real ecoul, pcoul, scoul, decouldd, decouldt, decoulda, d	    Real ecoul, pcoul, scoul, decouldd, decouldt, decoulda, d
    dpcoulda, dpcouldz, dscouldd, dscouldt, dscoulda, dscould	    dpcoulda, dpcouldz, dscouldd, dscouldt, dscoulda, dscould
    // yakovlev & shalybkov 1989 equations 82, 85, 86, 87	    // yakovlev & shalybkov 1989 equations 82, 85, 86, 87
    if (plasg >= 1.0) {						    if (plasg >= 1.0) {
      x        = std::pow(plasg, 0.25);				      x        = std::pow(plasg, 0.25);
      y        = avo * ytot1 * kerg;				      y        = avo * ytot1 * kerg;
      ecoul    = y * temp * (a1*plasg + b1*x + c1/x + d1);	      ecoul    = y * temp * (a1*plasg + b1*x + c1/x + d1);
      pcoul    = third * den * ecoul;				      pcoul    = third * den * ecoul;
      Real idkbro = 3.0e0*b1*x - 5.0e0*c1/x+d1*(std::log(plas	      Real idkbro = 3.0e0*b1*x - 5.0e0*c1/x+d1*(std::log(plas
      scoul    = -y * idkbro;					      scoul    = -y * idkbro;
#ifdef MYDEBUG							#ifdef MYDEBUG
      //printf("a1, b1, c1, d1, ec: %.16e, %.16e, %.16e, %.16	      //printf("a1, b1, c1, d1, ec: %.16e, %.16e, %.16e, %.16
      //       a1, b1, c1, d1, e1, ecoul);			      //       a1, b1, c1, d1, e1, ecoul);
      //printf("scoul, y, x: %.16e, %.16e, %.16e, %.16e\n", s	      //printf("scoul, y, x: %.16e, %.16e, %.16e, %.16e\n", s
      //       3.0*b1*x - 5.0*c1/x + d1 * (std::log(plasg) - 	      //       3.0*b1*x - 5.0*c1/x + d1 * (std::log(plasg) - 
      //printf("log(plasg): %.16e\n", std::log(plasg));		      //printf("log(plasg): %.16e\n", std::log(plasg));
      printf("idk bro: %.16e\n", idkbro);			      printf("idk bro: %.16e\n", idkbro);
      printf("%.16e, %.16e, %.16e, %.16e\n", 3.0e0*b1*x, 5.0e	      printf("%.16e, %.16e, %.16e, %.16e\n", 3.0e0*b1*x, 5.0e
             d1*(std::log(plasg)-1.0e0), e1);			             d1*(std::log(plasg)-1.0e0), e1);
#endif								#endif

      y        = avo*ytot1*kt*(a1 + 0.25/plasg*(b1*x - c1/x))	      y        = avo*ytot1*kt*(a1 + 0.25/plasg*(b1*x - c1/x))
      decouldd = y * plasgdd;					      decouldd = y * plasgdd;
      decouldt = y * plasgdt + ecoul/temp;			      decouldt = y * plasgdt + ecoul/temp;
      decoulda = y * plasgda - ecoul/abar;			      decoulda = y * plasgda - ecoul/abar;
      decouldz = y * plasgdz;					      decouldz = y * plasgdz;

      y        = third * den;					      y        = third * den;
      dpcouldd = third * ecoul + y*decouldd;			      dpcouldd = third * ecoul + y*decouldd;
      dpcouldt = y * decouldt;					      dpcouldt = y * decouldt;
      dpcoulda = y * decoulda;					      dpcoulda = y * decoulda;
      dpcouldz = y * decouldz;					      dpcouldz = y * decouldz;

      y        = -avo*kerg/(abar*plasg)*(0.75*b1*x+1.25*c1/x+	      y        = -avo*kerg/(abar*plasg)*(0.75*b1*x+1.25*c1/x+
      dscouldd = y * plasgdd;					      dscouldd = y * plasgdd;
      dscouldt = y * plasgdt;					      dscouldt = y * plasgdt;
      dscoulda = y * plasgda - scoul/abar;			      dscoulda = y * plasgda - scoul/abar;
      dscouldz = y * plasgdz;					      dscouldz = y * plasgdz;

    // yakovlev & shalybkov 1989 equations 102, 103, 104	    // yakovlev & shalybkov 1989 equations 102, 103, 104
    } else { // (plasg < 1.0)					    } else { // (plasg < 1.0)
      x        = plasg*std::sqrt(plasg);			      x        = plasg*std::sqrt(plasg);
      y        = std::pow(plasg, b2);				      y        = std::pow(plasg, b2);
      z        = c2 * x - third * a2 * y;			      z        = c2 * x - third * a2 * y;
      pcoul    = -pion * z;					      pcoul    = -pion * z;
      ecoul    = 3.0 * pcoul/den;				      ecoul    = 3.0 * pcoul/den;
      scoul    = -avo/abar*kerg*(c2*x -a2*(b2-1.0)/b2*y);	      scoul    = -avo/abar*kerg*(c2*x -a2*(b2-1.0)/b2*y);

      s        = 1.5*c2*x/plasg - third*a2*b2*y/plasg;		      s        = 1.5*c2*x/plasg - third*a2*b2*y/plasg;
      dpcouldd = -dpiondd*z - pion*s*plasgdd;			      dpcouldd = -dpiondd*z - pion*s*plasgdd;
      dpcouldt = -dpiondt*z - pion*s*plasgdt;			      dpcouldt = -dpiondt*z - pion*s*plasgdt;
      dpcoulda = -dpionda*z - pion*s*plasgda;			      dpcoulda = -dpionda*z - pion*s*plasgda;
      dpcouldz = -dpiondz*z - pion*s*plasgdz;			      dpcouldz = -dpiondz*z - pion*s*plasgdz;

      s        = 3.0/den;					      s        = 3.0/den;
      decouldd = s * dpcouldd - ecoul/den;			      decouldd = s * dpcouldd - ecoul/den;
      decouldt = s * dpcouldt;					      decouldt = s * dpcouldt;
      decoulda = s * dpcoulda;					      decoulda = s * dpcoulda;
      decouldz = s * dpcouldz;					      decouldz = s * dpcouldz;

      s        = -avo*kerg/(abar*plasg)*(1.5*c2*x-a2*(b2-1.0)	      s        = -avo*kerg/(abar*plasg)*(1.5*c2*x-a2*(b2-1.0)
      dscouldd = s * plasgdd;					      dscouldd = s * plasgdd;
      dscouldt = s * plasgdt;					      dscouldt = s * plasgdt;
      dscoulda = s * plasgda - scoul/abar;			      dscoulda = s * plasgda - scoul/abar;
      dscouldz = s * plasgdz;					      dscouldz = s * plasgdz;
    }								    }

    x   = prad + pion + pele + pcoul;				    x   = prad + pion + pele + pcoul;
    y   = erad + eion + eele + ecoul;				    y   = erad + eion + eele + ecoul;
    //z   = srad + sion + sele + scoul;				    //z   = srad + sion + sele + scoul;

    if ((x < 0.0) || (y < 0.0)) {				    if ((x < 0.0) || (y < 0.0)) {
      pcoul    = 0.0;						      pcoul    = 0.0;
      dpcouldd = 0.0;						      dpcouldd = 0.0;
      dpcouldt = 0.0;						      dpcouldt = 0.0;
      dpcoulda = 0.0;						      dpcoulda = 0.0;
      dpcouldz = 0.0;						      dpcouldz = 0.0;
      ecoul    = 0.0;						      ecoul    = 0.0;
      decouldd = 0.0;						      decouldd = 0.0;
      decouldt = 0.0;						      decouldt = 0.0;
      decoulda = 0.0;						      decoulda = 0.0;
      decouldz = 0.0;						      decouldz = 0.0;
      scoul    = 0.0;						      scoul    = 0.0;
      dscouldd = 0.0;						      dscouldd = 0.0;
      dscouldt = 0.0;						      dscouldt = 0.0;
      dscoulda = 0.0;						      dscoulda = 0.0;
      dscouldz = 0.0;						      dscouldz = 0.0;
    }								    }

    // sum all the gas components				    // sum all the gas components
    Real pgas    = pion + pele + pcoul;				    Real pgas    = pion + pele + pcoul;
    Real egas    = eion + eele + ecoul;				    Real egas    = eion + eele + ecoul;
    //Real sgas    = sion + sele + scoul;			    //Real sgas    = sion + sele + scoul;

    Real dpgasdd = dpiondd + dpepdd + dpcouldd;			    Real dpgasdd = dpiondd + dpepdd + dpcouldd;
    Real dpgasdt = dpiondt + dpepdt + dpcouldt;			    Real dpgasdt = dpiondt + dpepdt + dpcouldt;
    //Real dpgasda = dpionda + dpepda + dpcoulda;		    //Real dpgasda = dpionda + dpepda + dpcoulda;
    //Real dpgasdz = dpiondz + dpepdz + dpcouldz;		    //Real dpgasdz = dpiondz + dpepdz + dpcouldz;

    //Real degasdd = deiondd + deepdd + decouldd;		    //Real degasdd = deiondd + deepdd + decouldd;
    Real degasdt = deiondt + deepdt + decouldt;			    Real degasdt = deiondt + deepdt + decouldt;
    //Real degasda = deionda + deepda + decoulda;		    //Real degasda = deionda + deepda + decoulda;
    //Real degasdz = deiondz + deepdz + decouldz;		    //Real degasdz = deiondz + deepdz + decouldz;

    //Real dsgasdd = dsiondd + dsepdd + dscouldd;		    //Real dsgasdd = dsiondd + dsepdd + dscouldd;
    //Real dsgasdt = dsiondt + dsepdt + dscouldt;		    //Real dsgasdt = dsiondt + dsepdt + dscouldt;
    //Real dsgasda = dsionda + dsepda + dscoulda;		    //Real dsgasda = dsionda + dsepda + dscoulda;
    //Real dsgasdz = dsiondz + dsepdz + dscouldz;		    //Real dsgasdz = dsiondz + dsepdz + dscouldz;

    // add in radiation to get the total			    // add in radiation to get the total
    Real pres    = prad + pgas;					    Real pres    = prad + pgas;
    Real ener    = erad + egas;					    Real ener    = erad + egas;
    //Real entr    = srad + sgas;				    //Real entr    = srad + sgas;

    Real dpresdd = dpraddd + dpgasdd;				    Real dpresdd = dpraddd + dpgasdd;
    Real dpresdt = dpraddt + dpgasdt;				    Real dpresdt = dpraddt + dpgasdt;
    //Real dpresda = dpradda + dpgasda;				    //Real dpresda = dpradda + dpgasda;
    //Real dpresdz = dpraddz + dpgasdz;				    //Real dpresdz = dpraddz + dpgasdz;

    //Real denerdd = deraddd + degasdd;				    //Real denerdd = deraddd + degasdd;
    Real denerdt = deraddt + degasdt;				    Real denerdt = deraddt + degasdt;
    //Real denerda = deradda + degasda;				    //Real denerda = deradda + degasda;
    //Real denerdz = deraddz + degasdz;				    //Real denerdz = deraddz + degasdz;

    //Real dentrdd = dsraddd + dsgasdd;				    //Real dentrdd = dsraddd + dsgasdd;
    //Real dentrdt = dsraddt + dsgasdt;				    //Real dentrdt = dsraddt + dsgasdt;
    //Real dentrda = dsradda + dsgasda;				    //Real dentrda = dsradda + dsgasda;
    //Real dentrdz = dsraddz + dsgasdz;				    //Real dentrdz = dsraddz + dsgasdz;

    // for the gas						    // for the gas
    // the temperature and density exponents (c&g 9.81 9.82)	    // the temperature and density exponents (c&g 9.81 9.82)
    // the specific heat at constant volume (c&g 9.92)		    // the specific heat at constant volume (c&g 9.92)
    // the third adiabatic exponent (c&g 9.93)			    // the third adiabatic exponent (c&g 9.93)
    // the first adiabatic exponent (c&g 9.97)			    // the first adiabatic exponent (c&g 9.97)
    // the second adiabatic exponent (c&g 9.105)		    // the second adiabatic exponent (c&g 9.105)
    // the specific heat at constant pressure (c&g 9.98)	    // the specific heat at constant pressure (c&g 9.98)
    // and relativistic formula for the sound speed (c&g 14.2	    // and relativistic formula for the sound speed (c&g 14.2

    //Real zz        = pgas*deni;				    //Real zz        = pgas*deni;
    //Real zzi       = den/pgas;				    //Real zzi       = den/pgas;
    //Real chit_gas  = temp/pgas * dpgasdt;			    //Real chit_gas  = temp/pgas * dpgasdt;
    //Real chid_gas  = dpgasdd*zzi;				    //Real chid_gas  = dpgasdd*zzi;
    //Real cv_gas    = degasdt;					    //Real cv_gas    = degasdt;
    //x         = zz * chit_gas/(temp * cv_gas);		    //x         = zz * chit_gas/(temp * cv_gas);
    //Real gam3_gas  = x + 1.0;					    //Real gam3_gas  = x + 1.0;
    //Real gam1_gas  = chit_gas*x + chid_gas;			    //Real gam1_gas  = chit_gas*x + chid_gas;
    //Real nabad_gas = x/gam1_gas;				    //Real nabad_gas = x/gam1_gas;
    //Real gam2_gas  = 1.0/(1.0 - nabad_gas);			    //Real gam2_gas  = 1.0/(1.0 - nabad_gas);
    //Real cp_gas    = cv_gas * gam1_gas/chid_gas;		    //Real cp_gas    = cv_gas * gam1_gas/chid_gas;
    //z         = 1.0 + (egas + light2)*zzi;			    //z         = 1.0 + (egas + light2)*zzi;
    //Real sound_gas = clight * std::sqrt(gam1_gas/z);		    //Real sound_gas = clight * std::sqrt(gam1_gas/z);

#ifdef MYDEBUG							#ifdef MYDEBUG
    printf("pcou, pele, pion, prad: %.16e, %.16e, %.16e, %.16	    printf("pcou, pele, pion, prad: %.16e, %.16e, %.16e, %.16
           prad);						           prad);
    printf("ecou, eele, eion, erad: %.16e, %.16e, %.16e, %.16	    printf("ecou, eele, eion, erad: %.16e, %.16e, %.16e, %.16
           erad);						           erad);
#endif								#endif

    // for the totals						    // for the totals
    Real zz    = pres*deni;					    Real zz    = pres*deni;
    Real zzi   = den/pres;					    Real zzi   = den/pres;
    Real chit  = temp/pres * dpresdt;				    Real chit  = temp/pres * dpresdt;
    Real chid  = dpresdd*zzi;					    Real chid  = dpresdd*zzi;
    Real cv    = denerdt;					    Real cv    = denerdt;
    x     = zz * chit/(temp * cv);				    x     = zz * chit/(temp * cv);
    //Real gam3  = x + 1.0;					    //Real gam3  = x + 1.0;
    Real gam1  = chit*x + chid;					    Real gam1  = chit*x + chid;
    //Real nabad = x/gam1;					    //Real nabad = x/gam1;
    //Real gam2  = 1.0/(1.0 - nabad);				    //Real gam2  = 1.0/(1.0 - nabad);
    //Real cp    = cv * gam1/chid;				    //Real cp    = cv * gam1/chid;
    z     = 1.0 + (ener + light2)*zzi;				    z     = 1.0 + (ener + light2)*zzi;
    //Real sound = clight * std::sqrt(gam1/z);			    //Real sound = clight * std::sqrt(gam1/z);
    Real asq = light2 * gam1/z;					    Real asq = light2 * gam1/z;

    // maxwell relations; each is zero if the consistency is 	    // maxwell relations; each is zero if the consistency is 
    //x   = den * den;						    //x   = den * den;
    //Real dse = temp*dentrdt/denerdt - 1.0;			    //Real dse = temp*dentrdt/denerdt - 1.0;
    //Real dpe = (denerdd*x + temp*dpresdt)/pres - 1.0;		    //Real dpe = (denerdd*x + temp*dpresdt)/pres - 1.0;
    //Real dsp = -dentrdd*x/dpresdt - 1.0;			    //Real dsp = -dentrdd*x/dpresdt - 1.0;

    OutData(0) = ener * den;    // convert specific energy to	    OutData(0) = ener * den;    // convert specific energy to
    OutData(1) = denerdt * den; // convert specific energy to	    OutData(1) = denerdt * den; // convert specific energy to
    OutData(2) = pres;						    OutData(2) = pres;
    OutData(3) = dpresdt;					    OutData(3) = dpresdt;
    OutData(4) = asq;						    OutData(4) = asq;
    OutData(5) = temp;						    OutData(5) = temp;
    OutData(6) = dpresdd;					    OutData(6) = dpresdd;
    OutData(7) = etaele;					    OutData(7) = etaele;
    OutData(8) = gam1;						    OutData(8) = gam1;
  }								  }

  // index = 0 for internal energy; index = 2 for pressure; v	  // index = 0 for internal energy; index = 2 for pressure; v
  void HelmInvert(Real rho, Real GuessTemp, Real ye, Real aba	  void HelmInvert(Real rho, Real GuessTemp, Real ye, Real aba
                  AthenaArray<Real> &OutData) {			                  AthenaArray<Real> &OutData) {
  if ((std::isnan(var)) || (std::isnan(rho)) || (std::isnan(G	  if ((std::isnan(var)) || (std::isnan(rho)) || (std::isnan(G
      const char *varnames[] = {"e_int", "de_int/dT", "P_gas"	      const char *varnames[] = {"e_int", "de_int/dT", "P_gas"
      printf("ERR (%s): %.4e, rho: %.4e,  Temp: %.4e   Ye: %.	      printf("ERR (%s): %.4e, rho: %.4e,  Temp: %.4e   Ye: %.
             GuessTemp,ye);					             GuessTemp,ye);

      std::stringstream msg;					      std::stringstream msg;
      msg <<"Nan in root find (var) \n";			      msg <<"Nan in root find (var) \n";
      ATHENA_ERROR(msg);					      ATHENA_ERROR(msg);
    }								    }
  if ((var<=0.0) || (rho<=0.0)) {				  if ((var<=0.0) || (rho<=0.0)) {
      const char *varnames[] = {"e_int", "de_int/dT", "P_gas"	      const char *varnames[] = {"e_int", "de_int/dT", "P_gas"
      printf("ERR (%s): %.4e, rho: %.4e,  Temp: %.4e \n", var	      printf("ERR (%s): %.4e, rho: %.4e,  Temp: %.4e \n", var
             GuessTemp);					             GuessTemp);

      std::stringstream msg;					      std::stringstream msg;
      msg <<"Negative var\n";					      msg <<"Negative var\n";
      ATHENA_ERROR(msg);					      ATHENA_ERROR(msg);
  }								  }



    Real BrakT[] = {t(0), t(jmax-1)};				    Real BrakT[] = {t(0), t(jmax-1)};
    Real BrakVal[] = {0, 0};					    Real BrakVal[] = {0, 0};
    Real InvVar = 1.0 / var;					    Real InvVar = 1.0 / var;
    Real error = 9e9;						    Real error = 9e9;
    int nlim = nmax;						    int nlim = nmax;
    Real LastTemp = BrakT[0];					    Real LastTemp = BrakT[0];
    HelmLookupRhoT(rho, LastTemp, ye, abar, OutData);		    HelmLookupRhoT(rho, LastTemp, ye, abar, OutData);
    BrakVal[0] = OutData(index) * InvVar - 1.0;			    BrakVal[0] = OutData(index) * InvVar - 1.0;
    Real LastErr = BrakVal[0];					    Real LastErr = BrakVal[0];
    Real delta;							    Real delta;
#ifdef MYDEBUG1							#ifdef MYDEBUG1
    printf("%d: %.16e, %.16e\n", index, var, rho);		    printf("%d: %.16e, %.16e\n", index, var, rho);
    int mode = 0;						    int mode = 0;
#endif								#endif
    while (std::abs(error) > prec) {				    while (std::abs(error) > prec) {
      if (BrakVal[0] > 0) {//}* BrakVal[1] > 0) {		      if (BrakVal[0] > 0) {//}* BrakVal[1] > 0) {
        HelmLookupRhoT(rho, BrakT[0], ye, abar, OutData);	        HelmLookupRhoT(rho, BrakT[0], ye, abar, OutData);
        Real low = OutData(index);				        Real low = OutData(index);
        // If we've specified Tfloor and we are below Tmin ju	        // If we've specified Tfloor and we are below Tmin ju
        if (var < low) {					        if (var < low) {
           Real rtemp=1e3;					           Real rtemp=1e3;
           HelmLookupRhoT(rho, rtemp, ye, abar, OutData);	           HelmLookupRhoT(rho, rtemp, ye, abar, OutData);

           return;						           return;

        }							        }
        HelmLookupRhoT(rho, BrakT[1], ye, abar, OutData);	        HelmLookupRhoT(rho, BrakT[1], ye, abar, OutData);
        Real high =  OutData(index);				        Real high =  OutData(index);
        std::stringstream msg;					        std::stringstream msg;
        const char *varnames[] = {"e_int", "de_int/dT", "P_ga	        const char *varnames[] = {"e_int", "de_int/dT", "P_ga
        printf("ERR (%s): %.4e !<= %.4e !<= %.4e\n", varnames	        printf("ERR (%s): %.4e !<= %.4e !<= %.4e\n", varnames
               high);						               high);
        printf("at rho = %.4e, T_bounds = %.4e, %.4e,\n", rho	        printf("at rho = %.4e, T_bounds = %.4e, %.4e,\n", rho
        msg << "### FATAL ERROR in EquationOfState inversion 	        msg << "### FATAL ERROR in EquationOfState inversion 
            << std::endl << "Root not bracketed" << std::endl	            << std::endl << "Root not bracketed" << std::endl
        ATHENA_ERROR(msg);					        ATHENA_ERROR(msg);
      }								      }
      // if we are outside brackets use bisection method for 	      // if we are outside brackets use bisection method for 
      if ((GuessTemp <= BrakT[0]) || (GuessTemp >= BrakT[1]))	      if ((GuessTemp <= BrakT[0]) || (GuessTemp >= BrakT[1]))
        //GuessTemp = 0.5 * (BrakT[0] + BrakT[1]);		        //GuessTemp = 0.5 * (BrakT[0] + BrakT[1]);
        GuessTemp = std::sqrt(BrakT[0] * BrakT[1]);		        GuessTemp = std::sqrt(BrakT[0] * BrakT[1]);
        if(std::isnan(GuessTemp)){ std::cout<<"Nan guess in i	        if(std::isnan(GuessTemp)){ std::cout<<"Nan guess in i
#ifdef MYDEBUG1							#ifdef MYDEBUG1
        mode = 1;						        mode = 1;
#endif								#endif
      }								      }
      HelmLookupRhoT(rho, GuessTemp, ye, abar, OutData);	      HelmLookupRhoT(rho, GuessTemp, ye, abar, OutData);
      error = OutData(index) * InvVar - 1.0;			      error = OutData(index) * InvVar - 1.0;
#ifdef MYDEBUG1							#ifdef MYDEBUG1
      printf("%04d [%.4g, %.4g, %.4g]; %.4g| %d\n", 1000 - nl	      printf("%04d [%.4g, %.4g, %.4g]; %.4g| %d\n", 1000 - nl
             BrakT[1], error, mode);				             BrakT[1], error, mode);
#endif								#endif
      // update bracketing values				      // update bracketing values
      if (error < 0) {						      if (error < 0) {
        BrakT[0] = GuessTemp;					        BrakT[0] = GuessTemp;
        BrakVal[0] = error;					        BrakVal[0] = error;
      } else {							      } else {
        BrakT[1] = GuessTemp;					        BrakT[1] = GuessTemp;
        BrakVal[1] = error;					        BrakVal[1] = error;
      }								      }
      if (BrakT[1] <= BrakT[0]) {				      if (BrakT[1] <= BrakT[0]) {
        HelmLookupRhoT(rho, BrakT[0], ye, abar, OutData);	        HelmLookupRhoT(rho, BrakT[0], ye, abar, OutData);
        Real low = OutData(index);				        Real low = OutData(index);
        // If we've specified Tfloor and we are below Tmin ju	        // If we've specified Tfloor and we are below Tmin ju
        if (var < low) {					        if (var < low) {
           Real rtemp=1e3;					           Real rtemp=1e3;
           HelmLookupRhoT(rho, rtemp, ye, abar, OutData);	           HelmLookupRhoT(rho, rtemp, ye, abar, OutData);
           return;						           return;

        }							        }
        HelmLookupRhoT(rho, BrakT[1], ye, abar, OutData);	        HelmLookupRhoT(rho, BrakT[1], ye, abar, OutData);
        Real high = OutData(index);				        Real high = OutData(index);
        std::stringstream msg;					        std::stringstream msg;
        const char *varnames[] = {"e_int", "de_int/dT", "P_ga	        const char *varnames[] = {"e_int", "de_int/dT", "P_ga
        printf("ERR (%s): %.4e !<= %.4e !<= %.4e\n", varnames	        printf("ERR (%s): %.4e !<= %.4e !<= %.4e\n", varnames
               high);						               high);
        printf("at rho = %.4e, T_bounds = %.4e, %.4e,\n", rho	        printf("at rho = %.4e, T_bounds = %.4e, %.4e,\n", rho
        msg << "### FATAL ERROR in EquationOfState inversion 	        msg << "### FATAL ERROR in EquationOfState inversion 
            << std::endl << "Root not bracketed" << std::endl	            << std::endl << "Root not bracketed" << std::endl
        ATHENA_ERROR(msg);					        ATHENA_ERROR(msg);
      }								      }
      if (std::abs(error) > 1e-2) {				      if (std::abs(error) > 1e-2) {
        // secant method step					        // secant method step
        delta = error * (GuessTemp - LastTemp) / (error - Las	        delta = error * (GuessTemp - LastTemp) / (error - Las
        LastTemp = GuessTemp;					        LastTemp = GuessTemp;
        GuessTemp -= delta;					        GuessTemp -= delta;
        LastErr = error;					        LastErr = error;
#ifdef MYDEBUG1							#ifdef MYDEBUG1
        mode = 2;						        mode = 2;
#endif								#endif
      } else {							      } else {
        // Newton–Raphson step					        // Newton–Raphson step
        delta = var * error / OutData(index + 1);		        delta = var * error / OutData(index + 1);
        GuessTemp -= delta;					        GuessTemp -= delta;
        if(std::isnan(GuessTemp)){std::cout<<"Nan GT in NR "<	        if(std::isnan(GuessTemp)){std::cout<<"Nan GT in NR "<
#ifdef MYDEBUG1							#ifdef MYDEBUG1
        mode = 3;						        mode = 3;
#endif								#endif
      }								      }
      if (nlim-- < 0) {						      if (nlim-- < 0) {
        HelmLookupRhoT(rho, BrakT[0], ye, abar, OutData);	        HelmLookupRhoT(rho, BrakT[0], ye, abar, OutData);
        Real low = OutData(index);				        Real low = OutData(index);
        HelmLookupRhoT(rho, BrakT[1], ye, abar, OutData);	        HelmLookupRhoT(rho, BrakT[1], ye, abar, OutData);
        Real high = OutData(index);				        Real high = OutData(index);
        const char *varnames[] = {"e_int", "de_int/dT", "P_ga	        const char *varnames[] = {"e_int", "de_int/dT", "P_ga
        printf("ERR (%s): |%.4e|, |%.4e| > %.4e; %d iteration	        printf("ERR (%s): |%.4e|, |%.4e| > %.4e; %d iteration
               low * InvVar - 1.0, high * InvVar - 1.0, prec,	               low * InvVar - 1.0, high * InvVar - 1.0, prec,
        printf("%.4e <= %.4e <= %.4e\n", low, var, high);	        printf("%.4e <= %.4e <= %.4e\n", low, var, high);
        printf("at rho = %.4e, T_bounds = %.4e, %.4e,\n", rho	        printf("at rho = %.4e, T_bounds = %.4e, %.4e,\n", rho
        std::stringstream msg;					        std::stringstream msg;
        msg << "### FATAL ERROR in EquationOfState inversion 	        msg << "### FATAL ERROR in EquationOfState inversion 
            << std::endl << "Cannot converge" << std::endl;	            << std::endl << "Cannot converge" << std::endl;
        ATHENA_ERROR(msg);					        ATHENA_ERROR(msg);
      }								      }
    }								    }
    if (OutData(5) < t(0)) {					    if (OutData(5) < t(0)) {
      std::stringstream msg;					      std::stringstream msg;
      msg << "### FATAL ERROR in EquationOfState inversion (H	      msg << "### FATAL ERROR in EquationOfState inversion (H
          << std::endl << "Cannot converge. Recovered T off t	          << std::endl << "Cannot converge. Recovered T off t
      ATHENA_ERROR(msg);					      ATHENA_ERROR(msg);
    }								    }
   if (std::isnan(OutData(5))) {				   if (std::isnan(OutData(5))) {
      std::stringstream msg;					      std::stringstream msg;
      msg << "Nan returned in root find (HelmInvert)"		      msg << "Nan returned in root find (HelmInvert)"
          << std::endl << "Message from end of HelmInvert" <<	          << std::endl << "Message from end of HelmInvert" <<
      ATHENA_ERROR(msg);					      ATHENA_ERROR(msg);
    }								    }

    return;							    return;
  }								  }

 private:							 private:
  Real prec;							  Real prec;
  int nmax;							  int nmax;
  bool Tfloor;							  bool Tfloor;
  AthenaArray<Real> f, ft, ftt, fd, fdd, fdt, fddt, fdtt, fdd	  AthenaArray<Real> f, ft, ftt, fd, fdd, fdt, fddt, fdtt, fdd
  AthenaArray<Real> dpdf, dpdft, dpdfd, dpdfdt;			  AthenaArray<Real> dpdf, dpdft, dpdfd, dpdfdt;
  AthenaArray<Real> ef, efd, eft, efdt;				  AthenaArray<Real> ef, efd, eft, efdt;
  AthenaArray<Real> xf, xft, xfd, xfdt;				  AthenaArray<Real> xf, xft, xfd, xfdt;
  AthenaArray<Real> t, d, dt_sav, dt2i_sav, dti_sav, ddi_sav,	  AthenaArray<Real> t, d, dt_sav, dt2i_sav, dti_sav, ddi_sav,
                    dd2i_sav;					                    dd2i_sav;

  //quintic hermite polynomial statement functions		  //quintic hermite polynomial statement functions
  //psi0 and its derivatives					  //psi0 and its derivatives
  inline Real psi0(Real z) {					  inline Real psi0(Real z) {
    return std::pow(z, 3)*(z*(-6.0*z + 15.0) - 10.0) + 1.0;	    return std::pow(z, 3)*(z*(-6.0*z + 15.0) - 10.0) + 1.0;
  }								  }
  inline Real dpsi0(Real z) {					  inline Real dpsi0(Real z) {
    return z * z * ( z * (-30.0 * z + 60.0) - 30.0);		    return z * z * ( z * (-30.0 * z + 60.0) - 30.0);
  }								  }
  inline Real ddpsi0(Real z) {					  inline Real ddpsi0(Real z) {
    return z * ( z * (-120.0 * z + 180.0) - 60.0);		    return z * ( z * (-120.0 * z + 180.0) - 60.0);
  }								  }

  //psi1 and its derivatives					  //psi1 and its derivatives
  inline Real psi1(Real z) {					  inline Real psi1(Real z) {
    return z * ( z * z * ( z * (-3.0 * z + 8.0) - 6.0) + 1.0)	    return z * ( z * z * ( z * (-3.0 * z + 8.0) - 6.0) + 1.0)
  }								  }
  inline Real dpsi1(Real z) {					  inline Real dpsi1(Real z) {
    return z * z * ( z * (-15.0 * z + 32.0) - 18.0) + 1.0;	    return z * z * ( z * (-15.0 * z + 32.0) - 18.0) + 1.0;
  }								  }
  inline Real ddpsi1(Real z) {					  inline Real ddpsi1(Real z) {
    return z * (z * (-60.0 * z + 96.0) - 36.0);			    return z * (z * (-60.0 * z + 96.0) - 36.0);
  }								  }

  //psi2  and its derivatives					  //psi2  and its derivatives
  inline Real psi2(Real z) {					  inline Real psi2(Real z) {
    return 0.5 * z * z * ( z* ( z * (-z + 3.0) - 3.0) + 1.0);	    return 0.5 * z * z * ( z* ( z * (-z + 3.0) - 3.0) + 1.0);
  }								  }
  inline Real dpsi2(Real z) {					  inline Real dpsi2(Real z) {
    return 0.5 * z * ( z * (z * (-5.0 * z + 12.0) - 9.0) + 2.	    return 0.5 * z * ( z * (z * (-5.0 * z + 12.0) - 9.0) + 2.
  }								  }
  inline Real ddpsi2(Real z) {					  inline Real ddpsi2(Real z) {
    return 0.5 * (z * ( z * (-20.0 * z + 36.0) - 18.0) + 2.0)	    return 0.5 * (z * ( z * (-20.0 * z + 36.0) - 18.0) + 2.0)
  }								  }

  // cubic hermite polynomial statement functions		  // cubic hermite polynomial statement functions
  // psi0 & derivatives						  // psi0 & derivatives
  inline Real xpsi0(Real z) {					  inline Real xpsi0(Real z) {
    return z * z * (2.0*z - 3.0) + 1.0;				    return z * z * (2.0*z - 3.0) + 1.0;
  }								  }
  inline Real xdpsi0(Real z) {					  inline Real xdpsi0(Real z) {
    return z * (6.0*z - 6.0);					    return z * (6.0*z - 6.0);
  }								  }

  // psi1 & derivatives						  // psi1 & derivatives
  inline Real xpsi1(Real z) {					  inline Real xpsi1(Real z) {
    return z * ( z * (z - 2.0) + 1.0);				    return z * ( z * (z - 2.0) + 1.0);
  }								  }
  inline Real xdpsi1(Real z) {					  inline Real xdpsi1(Real z) {
    return z * (3.0*z - 4.0) + 1.0;				    return z * (3.0*z - 4.0) + 1.0;
  }								  }

  //biquintic hermite polynomial statement function		  //biquintic hermite polynomial statement function
  Real h5(AthenaArray<Real> data, Real w0t, Real w1t, Real w2	  Real h5(AthenaArray<Real> data, Real w0t, Real w1t, Real w2
          Real w2mt, Real w0d, Real w1d, Real w2d, Real w0md,	          Real w2mt, Real w0d, Real w1d, Real w2d, Real w0md,
  return data(0)  * w0d * w0t  + data(1)  * w0md * w0t		  return data(0)  * w0d * w0t  + data(1)  * w0md * w0t
       + data(2)  * w0d * w0mt + data(3)  * w0md * w0mt		       + data(2)  * w0d * w0mt + data(3)  * w0md * w0mt
       + data(4)  * w0d * w1t  + data(5)  * w0md * w1t		       + data(4)  * w0d * w1t  + data(5)  * w0md * w1t
       + data(6)  * w0d * w1mt + data(7)  * w0md * w1mt		       + data(6)  * w0d * w1mt + data(7)  * w0md * w1mt
       + data(8)  * w0d * w2t  + data(9)  * w0md * w2t		       + data(8)  * w0d * w2t  + data(9)  * w0md * w2t
       + data(10) * w0d * w2mt + data(11) * w0md * w2mt		       + data(10) * w0d * w2mt + data(11) * w0md * w2mt
       + data(12) * w1d * w0t  + data(13) * w1md * w0t		       + data(12) * w1d * w0t  + data(13) * w1md * w0t
       + data(14) * w1d * w0mt + data(15) * w1md * w0mt		       + data(14) * w1d * w0mt + data(15) * w1md * w0mt
       + data(16) * w2d * w0t  + data(17) * w2md * w0t		       + data(16) * w2d * w0t  + data(17) * w2md * w0t
       + data(18) * w2d * w0mt + data(19) * w2md * w0mt		       + data(18) * w2d * w0mt + data(19) * w2md * w0mt
       + data(20) * w1d * w1t  + data(21) * w1md * w1t		       + data(20) * w1d * w1t  + data(21) * w1md * w1t
       + data(22) * w1d * w1mt + data(23) * w1md * w1mt		       + data(22) * w1d * w1mt + data(23) * w1md * w1mt
       + data(24) * w2d * w1t  + data(25) * w2md * w1t		       + data(24) * w2d * w1t  + data(25) * w2md * w1t
       + data(26) * w2d * w1mt + data(27) * w2md * w1mt		       + data(26) * w2d * w1mt + data(27) * w2md * w1mt
       + data(28) * w1d * w2t  + data(29) * w1md * w2t		       + data(28) * w1d * w2t  + data(29) * w1md * w2t
       + data(30) * w1d * w2mt + data(31) * w1md * w2mt		       + data(30) * w1d * w2mt + data(31) * w1md * w2mt
       + data(32) * w2d * w2t  + data(33) * w2md * w2t		       + data(32) * w2d * w2t  + data(33) * w2md * w2t
       + data(34) * w2d * w2mt + data(35) * w2md * w2mt;	       + data(34) * w2d * w2mt + data(35) * w2md * w2mt;
  }								  }

  //bicubic hermite polynomial statement function		  //bicubic hermite polynomial statement function
  Real h3(AthenaArray<Real> data, Real w0t, Real w1t, Real w0	  Real h3(AthenaArray<Real> data, Real w0t, Real w1t, Real w0
          Real w1d, Real w0md, Real w1md) {			          Real w1d, Real w0md, Real w1md) {
    return data(0)  * w0d * w0t  + data(1)  * w0md * w0t	    return data(0)  * w0d * w0t  + data(1)  * w0md * w0t
         + data(2)  * w0d * w0mt + data(3)  * w0md * w0mt	         + data(2)  * w0d * w0mt + data(3)  * w0md * w0mt
         + data(4)  * w0d * w1t  + data(5)  * w0md * w1t	         + data(4)  * w0d * w1t  + data(5)  * w0md * w1t
         + data(6)  * w0d * w1mt + data(7)  * w0md * w1mt	         + data(6)  * w0d * w1mt + data(7)  * w0md * w1mt
         + data(8)  * w1d * w0t  + data(9)  * w1md * w0t	         + data(8)  * w1d * w0t  + data(9)  * w1md * w0t
         + data(10) * w1d * w0mt + data(11) * w1md * w0mt	         + data(10) * w1d * w0mt + data(11) * w1md * w0mt
         + data(12) * w1d * w1t  + data(13) * w1md * w1t	         + data(12) * w1d * w1t  + data(13) * w1md * w1t
         + data(14) * w1d * w1mt + data(15) * w1md * w1mt;	         + data(14) * w1d * w1mt + data(15) * w1md * w1mt;
  }								  }
};								};

namespace {							namespace {
  HelmTable* phelm = nullptr;					  HelmTable* phelm = nullptr;
  AthenaArray<Real> EosData;					  AthenaArray<Real> EosData;
  Real LastTemp;						  Real LastTemp;
  Real fixed_ye = -1.0;						  Real fixed_ye = -1.0;
  Real fixed_abar = -1.0;					  Real fixed_abar = -1.0;
  int i_ye = -1;						  int i_ye = -1;
  int i_abar = -1;						  int i_abar = -1;
  int i_temp = -1;						  int i_temp = -1;
}								}

//-----------------------------------------------------------	//-----------------------------------------------------------
//! \fn Real EquationOfState::PresFromRhoEg(Real rho, Real eg	//! \fn Real EquationOfState::PresFromRhoEg(Real rho, Real eg
//  \brief Return gas pressure					//  \brief Return gas pressure
Real EquationOfState::PresFromRhoEg(Real rho, Real egas, Real	Real EquationOfState::PresFromRhoEg(Real rho, Real egas, Real
  Real ye = fixed_ye;						  Real ye = fixed_ye;
  Real abar = fixed_abar;					  Real abar = fixed_abar;
  Real temp = LastTemp;						  Real temp = LastTemp;
  if (NSCALARS > 0 && i_ye >= 0) {				  if (NSCALARS > 0 && i_ye >= 0) {
    ye = s[i_ye] / rho;						    ye = s[i_ye] / rho;
  }								  }
  if (NSCALARS > 0 && i_abar >= 0) {				  if (NSCALARS > 0 && i_abar >= 0) {
    abar = s[i_abar] / rho;					    abar = s[i_abar] / rho;
  }								  }
  if (NSCALARS > 0 && i_temp >= 0) {				  if (NSCALARS > 0 && i_temp >= 0) {
    temp = s[i_temp] / rho;					    temp = s[i_temp] / rho;
  }								  }

#ifdef TEST1							#ifdef TEST1
  phelm->HelmLookupRhoT(rho * rho_unit_, 1e3, EosData);		  phelm->HelmLookupRhoT(rho * rho_unit_, 1e3, EosData);
  if (egas < EosData(0) * inv_egas_unit_) {			  if (egas < EosData(0) * inv_egas_unit_) {
    return EosData(0) * inv_egas_unit_;				    return EosData(0) * inv_egas_unit_;
  }								  }
#endif								#endif
  phelm->HelmInvert(rho * rho_unit_, temp, ye, abar, egas * e	  phelm->HelmInvert(rho * rho_unit_, temp, ye, abar, egas * e
  LastTemp = EosData(5);					  LastTemp = EosData(5);
  if (NSCALARS > 0 && i_temp >= 0) {				  if (NSCALARS > 0 && i_temp >= 0) {
    s[i_temp] = LastTemp * rho;					    s[i_temp] = LastTemp * rho;
  }								  }
  return EosData(2) * inv_egas_unit_;				  return EosData(2) * inv_egas_unit_;
}								}

//-----------------------------------------------------------	//-----------------------------------------------------------
//! \fn Real EquationOfState::EgasFromRhoP(Real rho, Real pre	//! \fn Real EquationOfState::EgasFromRhoP(Real rho, Real pre
//  \brief Return internal energy density			//  \brief Return internal energy density
Real EquationOfState::EgasFromRhoP(Real rho, Real pres, Real*	Real EquationOfState::EgasFromRhoP(Real rho, Real pres, Real*
  //phelm->HelmLookupRhoT(rho, pres, EosData);			  //phelm->HelmLookupRhoT(rho, pres, EosData);
  //std::cout << "EgasFromRhoP" << '\n';			  //std::cout << "EgasFromRhoP" << '\n';
  Real ye = fixed_ye;						  Real ye = fixed_ye;
  Real abar = fixed_abar;					  Real abar = fixed_abar;
  Real temp = LastTemp;						  Real temp = LastTemp;
  if (NSCALARS > 0 && i_ye >= 0) {				  if (NSCALARS > 0 && i_ye >= 0) {
    ye = r[i_ye];						    ye = r[i_ye];
  }								  }
  if (NSCALARS > 0 && i_abar >= 0) {				  if (NSCALARS > 0 && i_abar >= 0) {
    abar = r[i_abar];						    abar = r[i_abar];
  }								  }
  if (NSCALARS > 0 && i_temp >= 0) {				  if (NSCALARS > 0 && i_temp >= 0) {
    temp = r[i_temp];						    temp = r[i_temp];
  }								  }

#ifdef TEST1							#ifdef TEST1
  phelm->HelmLookupRhoT(rho * rho_unit_, 1e3, EosData);		  phelm->HelmLookupRhoT(rho * rho_unit_, 1e3, EosData);
  if (pres < EosData(2) * inv_egas_unit_) {			  if (pres < EosData(2) * inv_egas_unit_) {
    return EosData(0) * inv_egas_unit_;				    return EosData(0) * inv_egas_unit_;
  }								  }
#endif								#endif
  phelm->HelmInvert(rho * rho_unit_, temp, ye, abar, pres * e	  phelm->HelmInvert(rho * rho_unit_, temp, ye, abar, pres * e
  LastTemp = EosData(5);					  LastTemp = EosData(5);
  if (NSCALARS > 0 && i_temp >= 0) {				  if (NSCALARS > 0 && i_temp >= 0) {
    r[i_temp] = LastTemp;					    r[i_temp] = LastTemp;
  }								  }
  return EosData(0) * inv_egas_unit_;				  return EosData(0) * inv_egas_unit_;
}								}

//-----------------------------------------------------------	//-----------------------------------------------------------
//! \fn Real EquationOfState::AsqFromRhoP(Real rho, Real pres	//! \fn Real EquationOfState::AsqFromRhoP(Real rho, Real pres
//  \brief Return adiabatic sound speed squared			//  \brief Return adiabatic sound speed squared
Real EquationOfState::AsqFromRhoP(Real rho, Real pres, const 	Real EquationOfState::AsqFromRhoP(Real rho, Real pres, const 
  //phelm->HelmLookupRhoT(rho, pres, EosData);			  //phelm->HelmLookupRhoT(rho, pres, EosData);

  Real ye = fixed_ye;						  Real ye = fixed_ye;
  Real abar = fixed_abar;					  Real abar = fixed_abar;
  Real temp = LastTemp;						  Real temp = LastTemp;
  if (NSCALARS > 0 && i_ye >= 0) {				  if (NSCALARS > 0 && i_ye >= 0) {
    ye = r[i_ye];						    ye = r[i_ye];
  }								  }
  if (NSCALARS > 0 && i_abar >= 0) {				  if (NSCALARS > 0 && i_abar >= 0) {
    abar = r[i_abar];						    abar = r[i_abar];
  }								  }
  if (NSCALARS > 0 && i_temp >= 0) {				  if (NSCALARS > 0 && i_temp >= 0) {
    temp = r[i_temp];						    temp = r[i_temp];
  }								  }


#ifdef TEST1							#ifdef TEST1
  phelm->HelmLookupRhoT(rho * rho_unit_, 1e3, EosData);		  phelm->HelmLookupRhoT(rho * rho_unit_, 1e3, EosData);
  if (pres < EosData(2) * inv_egas_unit_) {			  if (pres < EosData(2) * inv_egas_unit_) {
    return EosData(4) * inv_vsqr_unit_;				    return EosData(4) * inv_vsqr_unit_;
  }								  }
#endif								#endif

  phelm->HelmInvert(rho * rho_unit_, temp, ye, abar, pres * e	  phelm->HelmInvert(rho * rho_unit_, temp, ye, abar, pres * e
  LastTemp = EosData(5);					  LastTemp = EosData(5);




  return EosData(4) * inv_vsqr_unit_;				  return EosData(4) * inv_vsqr_unit_;
}								}

Real EquationOfState::PresFromRhoT(Real rho, Real T, Real* r)	Real EquationOfState::PresFromRhoT(Real rho, Real T, Real* r)
  Real ye = fixed_ye;						  Real ye = fixed_ye;
  Real abar = fixed_abar;					  Real abar = fixed_abar;
  if (NSCALARS > 0 && i_ye >= 0) {				  if (NSCALARS > 0 && i_ye >= 0) {
    ye = r[i_ye];						    ye = r[i_ye];
  }								  }


  phelm->HelmLookupRhoT(rho, T, ye, abar, EosData);		  phelm->HelmLookupRhoT(rho, T, ye, abar, EosData);
  return EosData(2)* inv_egas_unit_;				  return EosData(2)* inv_egas_unit_;
}								}

Real EquationOfState::EtaFromRhoT(Real rho, Real T, Real* r) 	Real EquationOfState::EtaFromRhoT(Real rho, Real T, Real* r) 
  Real ye = fixed_ye;						  Real ye = fixed_ye;
  Real abar = fixed_abar;					  Real abar = fixed_abar;
  if (NSCALARS > 0 && i_ye >= 0) {				  if (NSCALARS > 0 && i_ye >= 0) {
    ye = r[i_ye];						    ye = r[i_ye];
  }								  }
  phelm->HelmLookupRhoT(rho, T, ye, abar, EosData);		  phelm->HelmLookupRhoT(rho, T, ye, abar, EosData);
  return EosData(7);						  return EosData(7);
}								}


Real EquationOfState::GammaFromRhoT(Real rho, Real T, Real* r	Real EquationOfState::GammaFromRhoT(Real rho, Real T, Real* r
  Real ye = fixed_ye;						  Real ye = fixed_ye;
  Real abar = fixed_abar;					  Real abar = fixed_abar;
  if (NSCALARS > 0 && i_ye >= 0) {				  if (NSCALARS > 0 && i_ye >= 0) {
    ye = r[i_ye];						    ye = r[i_ye];
  }								  }
  phelm->HelmLookupRhoT(rho, T, ye, abar, EosData);		  phelm->HelmLookupRhoT(rho, T, ye, abar, EosData);
  return EosData(8);						  return EosData(8);
}								}

							      >	//Real EquationOfState::EtotFromRhoT(Real rho, Real T, Real* 
							      >	//  Real ye = fixed_ye;
							      >	//  Real abar = fixed_abar;
							      >	//  if (NSCALARS > 0 && i_ye >= 0) {
							      >	//    ye = r[i_ye];
							      >	//  }
							      >	//  phelm->HelmLookupRhoT(rho, T, ye, abar, EosData);
							      >	//  return EosData(0) / rho;
							      >	//}
							      >
Real EquationOfState::TFromRhoP(Real rho, Real pres, Real* r)	Real EquationOfState::TFromRhoP(Real rho, Real pres, Real* r)
  Real ye = fixed_ye;						  Real ye = fixed_ye;
  Real abar = fixed_abar;					  Real abar = fixed_abar;
  Real temp = LastTemp;						  Real temp = LastTemp;
  if (NSCALARS > 0 && i_ye >= 0) {				  if (NSCALARS > 0 && i_ye >= 0) {
    ye = r[i_ye];						    ye = r[i_ye];
  }								  }


  if (NSCALARS > 0 && i_temp >= 0) {				  if (NSCALARS > 0 && i_temp >= 0) {
    temp = r[i_temp];						    temp = r[i_temp];
  }								  }

  phelm->HelmInvert(rho * rho_unit_, temp, ye, abar, pres * e	  phelm->HelmInvert(rho * rho_unit_, temp, ye, abar, pres * e
  LastTemp = EosData(5);					  LastTemp = EosData(5);
  if (NSCALARS > 0 && i_temp >= 0) {				  if (NSCALARS > 0 && i_temp >= 0) {
    r[i_temp] = LastTemp;					    r[i_temp] = LastTemp;
  }								  }

  return LastTemp;						  return LastTemp;
}								}

Real EquationOfState::TFromRhoEgas(Real rho, Real egas, Real*	Real EquationOfState::TFromRhoEgas(Real rho, Real egas, Real*
  Real ye = fixed_ye;						  Real ye = fixed_ye;
  Real abar = fixed_abar;					  Real abar = fixed_abar;
  Real temp=LastTemp;						  Real temp=LastTemp;
  if (NSCALARS > 0 && i_ye >= 0) {				  if (NSCALARS > 0 && i_ye >= 0) {
    ye = s[i_ye] / rho;						    ye = s[i_ye] / rho;
  }								  }

  if (NSCALARS > 0 && i_temp >= 0) {				  if (NSCALARS > 0 && i_temp >= 0) {
    temp = s[i_temp]/rho;					    temp = s[i_temp]/rho;
  }								  }
  phelm->HelmInvert(rho * rho_unit_, temp, ye, abar, egas * e	  phelm->HelmInvert(rho * rho_unit_, temp, ye, abar, egas * e
  LastTemp = EosData(5);					  LastTemp = EosData(5);
  if (NSCALARS > 0 && i_temp >= 0) {				  if (NSCALARS > 0 && i_temp >= 0) {
    s[i_temp] = LastTemp*rho;					    s[i_temp] = LastTemp*rho;
  }								  }

  return LastTemp;						  return LastTemp;
}								}


Real EquationOfState::GetEgasFloor(Real rho, Real* s) {		Real EquationOfState::GetEgasFloor(Real rho, Real* s) {
  Real ye = fixed_ye;						  Real ye = fixed_ye;
  Real abar = fixed_abar;					  Real abar = fixed_abar;
  if (NSCALARS > 0 && i_ye >= 0) {				  if (NSCALARS > 0 && i_ye >= 0) {
    ye = s[i_ye] / rho;						    ye = s[i_ye] / rho;
  }								  }

  phelm->HelmLookupRhoT(rho, 1e3, ye, abar, EosData);		  phelm->HelmLookupRhoT(rho, 1e3, ye, abar, EosData);
  return EosData(2) * inv_egas_unit_;				  return EosData(2) * inv_egas_unit_;

}								}

Real EquationOfState::GetPresFloor(Real rho, Real* r) {		Real EquationOfState::GetPresFloor(Real rho, Real* r) {
  Real ye = fixed_ye;						  Real ye = fixed_ye;
  Real abar = fixed_abar;					  Real abar = fixed_abar;
  if (NSCALARS > 0 && i_ye >= 0) {				  if (NSCALARS > 0 && i_ye >= 0) {
    ye = r[i_ye];						    ye = r[i_ye];
  }								  }
  phelm->HelmLookupRhoT(rho, 1e3, ye, abar, EosData);		  phelm->HelmLookupRhoT(rho, 1e3, ye, abar, EosData);
  return EosData(0) * inv_egas_unit_;				  return EosData(0) * inv_egas_unit_;

}								}


#if 0								#if 0
// MSBC: I can't remember why we chose 7 here			// MSBC: I can't remember why we chose 7 here
void EquationOfState::SevenFromRhoT(Real rho, Real T, AthenaA	void EquationOfState::SevenFromRhoT(Real rho, Real T, AthenaA
  phelm->HelmLookupRhoT(rho * rho_unit_, T, out);		  phelm->HelmLookupRhoT(rho * rho_unit_, T, out);
  LastTemp = T;							  LastTemp = T;
  out(0) *= inv_egas_unit_;					  out(0) *= inv_egas_unit_;
  out(1) *= inv_egas_unit_;					  out(1) *= inv_egas_unit_;
  out(2) *= inv_egas_unit_;					  out(2) *= inv_egas_unit_;
  out(3) *= inv_egas_unit_;					  out(3) *= inv_egas_unit_;
  out(4) *= inv_vsqr_unit_;					  out(4) *= inv_vsqr_unit_;
  out(6) *= inv_egas_unit_ * rho_unit_;				  out(6) *= inv_egas_unit_ * rho_unit_;
}								}

Real EquationOfState::TFromRhoP(Real rho, Real pres) {		Real EquationOfState::TFromRhoP(Real rho, Real pres) {
  phelm->HelmInvert(rho * rho_unit_, LastTemp, pres * egas_un	  phelm->HelmInvert(rho * rho_unit_, LastTemp, pres * egas_un
  LastTemp = EosData(5);					  LastTemp = EosData(5);
  return LastTemp;						  return LastTemp;
}								}

Real EquationOfState::PresFromRhoT(Real rho, Real T) {		Real EquationOfState::PresFromRhoT(Real rho, Real T) {
  phelm->HelmLookupRhoT(rho * rho_unit_, T, EosData);		  phelm->HelmLookupRhoT(rho * rho_unit_, T, EosData);
  LastTemp = T;							  LastTemp = T;
  return EosData(2) * inv_egas_unit_;				  return EosData(2) * inv_egas_unit_;
}								}

Real EquationOfState::TFromRhoEgas(Real rho, Real egas) {	Real EquationOfState::TFromRhoEgas(Real rho, Real egas) {
  phelm->HelmInvert(rho * rho_unit_, LastTemp, egas * egas_un	  phelm->HelmInvert(rho * rho_unit_, LastTemp, egas * egas_un
  LastTemp = EosData(5);					  LastTemp = EosData(5);
  return LastTemp;						  return LastTemp;
}								}
#endif								#endif

//-----------------------------------------------------------	//-----------------------------------------------------------
//! void EquationOfState::InitEosConstants(ParameterInput* pi	//! void EquationOfState::InitEosConstants(ParameterInput* pi
//  \brief Initialize constants for EOS				//  \brief Initialize constants for EOS
void EquationOfState::InitEosConstants(ParameterInput *pin) {	void EquationOfState::InitEosConstants(ParameterInput *pin) {

  std::cout<<"Using Matts's HelmEOS \n";			  std::cout<<"Using Matts's HelmEOS \n";
  if (!phelm) phelm = new HelmTable(pin, ptable);		  if (!phelm) phelm = new HelmTable(pin, ptable);

  LastTemp = std::pow(10.0, 0.5 * (phelm->tlo + phelm->thi));	  LastTemp = std::pow(10.0, 0.5 * (phelm->tlo + phelm->thi));
  if (pin->DoesParameterExist("hydro", "helm_abar")) {		  if (pin->DoesParameterExist("hydro", "helm_abar")) {
    fixed_abar = pin->GetReal("hydro", "helm_abar");		    fixed_abar = pin->GetReal("hydro", "helm_abar");
  }								  }
  if (pin->DoesParameterExist("hydro", "helm_ye")) {		  if (pin->DoesParameterExist("hydro", "helm_ye")) {
    std::cout<<"Using fixed Ye in HEOS \n";			    std::cout<<"Using fixed Ye in HEOS \n";
    fixed_ye = pin->GetReal("hydro", "helm_ye");		    fixed_ye = pin->GetReal("hydro", "helm_ye");
  } else if (pin->DoesParameterExist("hydro", "helm_zbar")) {	  } else if (pin->DoesParameterExist("hydro", "helm_zbar")) {
    if (fixed_abar < 0) {					    if (fixed_abar < 0) {
      std::stringstream msg;					      std::stringstream msg;
      msg << "### FATAL ERROR in EquationOfState::InitEosCons	      msg << "### FATAL ERROR in EquationOfState::InitEosCons
          << "hydro/helm_abar must be specified if hydro/helm	          << "hydro/helm_abar must be specified if hydro/helm
      ATHENA_ERROR(msg);					      ATHENA_ERROR(msg);
    }								    }
    fixed_ye = std::max(1.0e-16, pin->GetReal("hydro", "helm_	    fixed_ye = std::max(1.0e-16, pin->GetReal("hydro", "helm_
  }								  }
  if (NSCALARS==0 && std::min(fixed_abar, fixed_ye) < 0) {	  if (NSCALARS==0 && std::min(fixed_abar, fixed_ye) < 0) {
    std::stringstream msg;					    std::stringstream msg;
    msg << "### FATAL ERROR in EquationOfState::InitEosConsta	    msg << "### FATAL ERROR in EquationOfState::InitEosConsta
        << "helm_abar and helm_ye (or helm_zbar) must be spec	        << "helm_abar and helm_ye (or helm_zbar) must be spec
        << std::endl;						        << std::endl;
    ATHENA_ERROR(msg);						    ATHENA_ERROR(msg);
  }								  }
  if (pin->DoesParameterExist("hydro", "helm_ye_index")) {	  if (pin->DoesParameterExist("hydro", "helm_ye_index")) {
    std::cout<<"Using Ye passive scalars in HEOS \n";		    std::cout<<"Using Ye passive scalars in HEOS \n";
    i_ye = pin->GetInteger("hydro", "helm_ye_index");		    i_ye = pin->GetInteger("hydro", "helm_ye_index");
    if (i_ye < 0 || i_ye >= NSCALARS) {				    if (i_ye < 0 || i_ye >= NSCALARS) {
      std::stringstream msg;					      std::stringstream msg;
      msg << "### FATAL ERROR in EquationOfState::InitEosCons	      msg << "### FATAL ERROR in EquationOfState::InitEosCons
          << "hydro/helm_ye_index must be between 0 and NSCAL	          << "hydro/helm_ye_index must be between 0 and NSCAL
          << std::endl;						          << std::endl;
      ATHENA_ERROR(msg);					      ATHENA_ERROR(msg);
    }								    }
  }								  }
  if (pin->DoesParameterExist("hydro", "helm_abar_index")) {	  if (pin->DoesParameterExist("hydro", "helm_abar_index")) {
    i_abar = pin->GetInteger("hydro", "helm_abar_index");	    i_abar = pin->GetInteger("hydro", "helm_abar_index");
    if (i_abar < 0 || i_abar >= NSCALARS) {			    if (i_abar < 0 || i_abar >= NSCALARS) {
      std::stringstream msg;					      std::stringstream msg;
      msg << "### FATAL ERROR in EquationOfState::InitEosCons	      msg << "### FATAL ERROR in EquationOfState::InitEosCons
          << "hydro/helm_abar_index must be between 0 and NSC	          << "hydro/helm_abar_index must be between 0 and NSC
          << std::endl;						          << std::endl;
      ATHENA_ERROR(msg);					      ATHENA_ERROR(msg);
    }								    }
    if (i_abar == i_ye) {					    if (i_abar == i_ye) {
      std::stringstream msg;					      std::stringstream msg;
      msg << "### FATAL ERROR in EquationOfState::InitEosCons	      msg << "### FATAL ERROR in EquationOfState::InitEosCons
          << "hydro/helm_abar_index must be different from hy	          << "hydro/helm_abar_index must be different from hy
          << std::endl;						          << std::endl;
      ATHENA_ERROR(msg);					      ATHENA_ERROR(msg);
    }								    }
    if (fixed_ye < 0 && i_ye < 0) {				    if (fixed_ye < 0 && i_ye < 0) {
      std::stringstream msg;					      std::stringstream msg;
      msg << "### FATAL ERROR in EquationOfState::InitEosCons	      msg << "### FATAL ERROR in EquationOfState::InitEosCons
          << "either hydro/helm_ye or hydro/helm_ye_index mus	          << "either hydro/helm_ye or hydro/helm_ye_index mus
          << std::endl;						          << std::endl;
      ATHENA_ERROR(msg);					      ATHENA_ERROR(msg);
    }								    }
    if (fixed_abar < 0 && i_abar < 0) {				    if (fixed_abar < 0 && i_abar < 0) {
      std::stringstream msg;					      std::stringstream msg;
      msg << "### FATAL ERROR in EquationOfState::InitEosCons	      msg << "### FATAL ERROR in EquationOfState::InitEosCons
          << "either hydro/helm_abar or hydro/helm_abar_index	          << "either hydro/helm_abar or hydro/helm_abar_index
          << std::endl;						          << std::endl;
      ATHENA_ERROR(msg);					      ATHENA_ERROR(msg);
    }								    }
    }								    }
    if (pin->DoesParameterExist("hydro", "helm_temp_index")) 	    if (pin->DoesParameterExist("hydro", "helm_temp_index")) 
      i_temp = pin->GetInteger("hydro", "helm_temp_index");	      i_temp = pin->GetInteger("hydro", "helm_temp_index");
      std::cout<<"Using Temp passive scalars in HELMEOS\n";	      std::cout<<"Using Temp passive scalars in HELMEOS\n";
      if (i_temp < 0 || i_temp >= NSCALARS) {			      if (i_temp < 0 || i_temp >= NSCALARS) {
        std::stringstream msg;					        std::stringstream msg;
        msg << "### FATAL ERROR in EquationOfState::InitEosCo	        msg << "### FATAL ERROR in EquationOfState::InitEosCo
            << "hydro/helm_temp_index must be between 0 and N	            << "hydro/helm_temp_index must be between 0 and N
            << NSCALARS << ")."					            << NSCALARS << ")."
            << std::endl;					            << std::endl;
        ATHENA_ERROR(msg);					        ATHENA_ERROR(msg);
      }								      }
    }								    }
  EosData.NewAthenaArray(HelmholtzConstants::nOut);		  EosData.NewAthenaArray(HelmholtzConstants::nOut);
  phelm->HelmLookupRhoT(1e12, 4.64e11,0.05,1.0, EosData);	  phelm->HelmLookupRhoT(1e12, 4.64e11,0.05,1.0, EosData);
  std::cout<<"In HEOS Eta   "<<EosData(7)<<"\n";		  std::cout<<"In HEOS Eta   "<<EosData(7)<<"\n";

  ///////////////////						  ///////////////////
  // test							  // test
#ifdef MAINTEST							#ifdef MAINTEST
  Real rho_list[] = {						  Real rho_list[] = {
                      -1.2000000000000000e+01,			                      -1.2000000000000000e+01,
                      -1.1000000000000000e+01,			                      -1.1000000000000000e+01,
                      -1.0000000000000000e+01,			                      -1.0000000000000000e+01,
                      -9.0000000000000000e+00,			                      -9.0000000000000000e+00,
                      -8.0000000000000000e+00,			                      -8.0000000000000000e+00,
                      -7.0000000000000000e+00,			                      -7.0000000000000000e+00,
                      -6.0000000000000000e+00,			                      -6.0000000000000000e+00,
                      -5.0000000000000000e+00,			                      -5.0000000000000000e+00,
                      -4.0000000000000000e+00,			                      -4.0000000000000000e+00,
                      -3.0000000000000000e+00,			                      -3.0000000000000000e+00,
                      -2.0000000000000000e+00,			                      -2.0000000000000000e+00,
                      -1.0000000000000000e+00,			                      -1.0000000000000000e+00,
                      0.0000000000000000e+00,			                      0.0000000000000000e+00,
                      1.0000000000000000e+00,			                      1.0000000000000000e+00,
                      2.0000000000000000e+00,			                      2.0000000000000000e+00,
                      3.0000000000000000e+00,			                      3.0000000000000000e+00,
                      4.0000000000000000e+00,			                      4.0000000000000000e+00,
                      5.0000000000000000e+00,			                      5.0000000000000000e+00,
                      6.0000000000000000e+00,			                      6.0000000000000000e+00,
                      7.0000000000000000e+00,			                      7.0000000000000000e+00,
                      8.0000000000000000e+00,			                      8.0000000000000000e+00,
                      9.0000000000000000e+00,			                      9.0000000000000000e+00,
                      1.0000000000000000e+01,			                      1.0000000000000000e+01,
                      1.1000000000000000e+01,			                      1.1000000000000000e+01,
                      1.2000000000000000e+01,			                      1.2000000000000000e+01,
                      1.3000000000000000e+01,			                      1.3000000000000000e+01,
                      1.4000000000000000e+01,			                      1.4000000000000000e+01,
                      1.5000000000000000e+01,			                      1.5000000000000000e+01,
                      4.2058452966196676e+00,			                      4.2058452966196676e+00,
                      1.0129862822644725e+01,			                      1.0129862822644725e+01,
                      2.5766584519647218e+00,			                      2.5766584519647218e+00,
                      2.3614118173045640e-01,			                      2.3614118173045640e-01,
                      -8.8019100913495780e+00,			                      -8.8019100913495780e+00,
                      1.3354073875986661e+01,			                      1.3354073875986661e+01,
                      -6.7616685886840369e+00,			                      -6.7616685886840369e+00,
                      -1.0746381669808670e+01,			                      -1.0746381669808670e+01,
                      -1.3453761956427019e+00,			                      -1.3453761956427019e+00,
                      1.2169963846606585e+01,			                      1.2169963846606585e+01,
                      7.5166571366261294e+00,			                      7.5166571366261294e+00,
                      1.7010857930790877e+00,			                      1.7010857930790877e+00,
                      -6.3777124411303419e+00,			                      -6.3777124411303419e+00,
                      -3.7366062655473655e+00,			                      -3.7366062655473655e+00,
                      1.4165993948365038e+01,			                      1.4165993948365038e+01,
                      1.3986041228825936e+01,			                      1.3986041228825936e+01,
                      3.3786472603813245e+00,			                      3.3786472603813245e+00,
                      1.1591598832352989e+01,			                      1.1591598832352989e+01,
                      -2.3463727098012228e+00,			                      -2.3463727098012228e+00,
                      9.5160876639466032e+00			                      9.5160876639466032e+00
                    };						                    };
  Real temp_list[] = {						  Real temp_list[] = {
                      3.0000000000000000e+00,			                      3.0000000000000000e+00,
                      4.0000000000000000e+00,			                      4.0000000000000000e+00,
                      5.0000000000000000e+00,			                      5.0000000000000000e+00,
                      6.0000000000000000e+00,			                      6.0000000000000000e+00,
                      7.0000000000000000e+00,			                      7.0000000000000000e+00,
                      8.0000000000000000e+00,			                      8.0000000000000000e+00,
                      9.0000000000000000e+00,			                      9.0000000000000000e+00,
                      1.0000000000000000e+01,			                      1.0000000000000000e+01,
                      1.1000000000000000e+01,			                      1.1000000000000000e+01,
                      1.2000000000000000e+01,			                      1.2000000000000000e+01,
                      1.3000000000000000e+01,			                      1.3000000000000000e+01,
                      1.1381931348144851e+01,			                      1.1381931348144851e+01,
                      9.7570094890509491e+00,			                      9.7570094890509491e+00,
                      3.1155589943242417e+00,			                      3.1155589943242417e+00,
                      1.0986874704351557e+01,			                      1.0986874704351557e+01,
                      5.8628915200003870e+00,			                      5.8628915200003870e+00,
                      9.6261258046854170e+00,			                      9.6261258046854170e+00,
                      1.2678093829137069e+01,			                      1.2678093829137069e+01,
                      1.1216961509383435e+01,			                      1.1216961509383435e+01,
                      9.0686831658770330e+00,			                      9.0686831658770330e+00,
                      1.0386295554181906e+01,			                      1.0386295554181906e+01,
                      8.7018246400376746e+00,			                      8.7018246400376746e+00,
                      6.9459561738213313e+00,			                      6.9459561738213313e+00,
                      6.8859742835374531e+00,			                      6.8859742835374531e+00,
                      7.1528300316393914e+00,			                      7.1528300316393914e+00,
                      5.8681615211276359e+00,			                      5.8681615211276359e+00,
                      1.2028328578165263e+01,			                      1.2028328578165263e+01,
                      1.2656772988232268e+01,			                      1.2656772988232268e+01,
                      6.8459476240110000e+00,			                      6.8459476240110000e+00,
                      8.1548048893242360e+00,			                      8.1548048893242360e+00,
                      5.9593483536909213e+00			                      5.9593483536909213e+00
                    };						                    };
  for (int i=0; i<48; ++i) {					  for (int i=0; i<48; ++i) {
    Real rho = std::pow(10.0, rho_list[i]);			    Real rho = std::pow(10.0, rho_list[i]);
    for (int j=0; j<31; ++j) {					    for (int j=0; j<31; ++j) {
      Real temp = std::pow(10.0, temp_list[j]);			      Real temp = std::pow(10.0, temp_list[j]);
      phelm->HelmLookupRhoT(rho, temp, EosData);		      phelm->HelmLookupRhoT(rho, temp, EosData);
      for (int k=0; k<6; ++k) {					      for (int k=0; k<6; ++k) {
        printf("%.16e, ", EosData(k));				        printf("%.16e, ", EosData(k));
      }								      }
      std::cout << '\n';					      std::cout << '\n';
    }								    }
  }								  }
#endif								#endif
#ifdef MYDEBUG							#ifdef MYDEBUG
  Real rho, temp;						  Real rho, temp;
  std::cout << "Input fluid parameters and retrieve EOS param	  std::cout << "Input fluid parameters and retrieve EOS param
            << "Non-positive inputs will exit loop." << '\n';	            << "Non-positive inputs will exit loop." << '\n';
  std::cout << "Input density (mass/volume): ";			  std::cout << "Input density (mass/volume): ";
  std::cin >> rho;						  std::cin >> rho;
  std::cout << "Input temperature (K): ";			  std::cout << "Input temperature (K): ";
  std::cin >> temp;						  std::cin >> temp;
  while (rho > 0 && std::isfinite(rho) && temp >0 && std::isf	  while (rho > 0 && std::isfinite(rho) && temp >0 && std::isf
    printf("d, t: %.16e, %.16e\n", rho, temp);			    printf("d, t: %.16e, %.16e\n", rho, temp);
    phelm->HelmLookupRhoT(rho, temp, EosData);			    phelm->HelmLookupRhoT(rho, temp, EosData);
    std::cout << "e(d, e)          , p(d, e)         , ASq(d,	    std::cout << "e(d, e)          , p(d, e)         , ASq(d,
    printf("%.16e, %.16e, %.16e\n", EosData(0), EosData(2), E	    printf("%.16e, %.16e, %.16e\n", EosData(0), EosData(2), E
    std::cout << "Input density (mass/volume): ";		    std::cout << "Input density (mass/volume): ";
    std::cin >> rho;						    std::cin >> rho;
    std::cout << "Input temperature (K): ";			    std::cout << "Input temperature (K): ";
    std::cin >> temp;						    std::cin >> temp;
  }								  }
  std::cout << std::endl;					  std::cout << std::endl;
#endif								#endif
  // Test							  // Test
  //////////////////						  //////////////////
  return;							  return;
}								}

